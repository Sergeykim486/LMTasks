import openpyxl, os, config, telebot, functions, buttons, logging, time, datetime, asyncio, threading
from telebot import TeleBot, types
from db import Database
from datetime import datetime
from openpyxl.styles import Alignment

# –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –±–∞–∑–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç
ActiveUser = {}
sendedmessages = []
dbname = os.path.dirname(os.path.abspath(__file__)) + '/Database/' + 'lmtasksbase.db'
db = Database(dbname)
bot = telebot.TeleBot(config.TOKEN)
continue_polling = True
sch = 0
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
if db.get_record_by_id('Users', 0) == None:
    db.insert_record(
        'Users',
        [
            0,
            'Client BOT',
            '...',
            '...'
        ]
    )
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ–∫–∞—Ü–∏—è–º–∏ –∏ –≥–æ–ª–æ–Ω–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏
db.add_column_to_table("Tasks", "location", "INTEGER")
cols = [
    "id INTEGER PRIMARY KEY",
    "inn INTEGER",
    "name TEXT",
    "lat TEXT",
    "lon TEXT"
]
db.create_table("Locations", cols)
try:
    if db.get_record_by_id('Statuses', 5) is None and db.get_record_by_id('Statuses', 6) is None and db.get_record_by_id('Statuses', 7) is None:
        db.insert_record('Statuses', [5, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'])
        db.insert_record('Statuses', [6, '–ü—Ä—Ä–∏–Ω—è—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–º'])
        db.insert_record('Statuses', [7, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'])
except Exception as e:
    logging.error(e)
    pass
try:
    if db.get_record_by_id('locations', 999) is None:
        db.insert_record('locations', [999, 0, '–¢–µ—Ö–Ω–∏–∫–∞ –≤ –æ—Ñ–∏—Å–µ', 41.28921489333344, 69.31288111459628])
except Exception as e:
    logging.error(e)
    pass
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def job():
    await schedule_message()
async def schedule_message():
    while True:
        try:
            Tasks = db.select_table_with_filters('Tasks', {'status': 0})
            if len(Tasks) > 0:
                for line in Tasks:
                    db.update_records('Tasks', ['status'], [1], 'id', line[0])
                    tid = line[0]
                    sendtoall(functions.curtask(tid), buttons.buttonsinline([['üëç –ü—Ä–∏–Ω—è—Ç—å', 'confirm ' + str(tid)], ['üìé –ù–∞–∑–Ω–∞—á–∏—Ç—å', 'set ' + str(tid)]]), 0)
        except Exception as e:
            logging.error(e)
            pass
        try:
            revs = db.select_table_with_filters('rev', {'status': 0})
            if len(revs) > 0:
                for line in revs:
                    db.update_records('rev', ['status'], [1], 'id', line[0])
                    mes = '–ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–∑—ã–≤/–æ—Ü–µ–Ω–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n'
                    mes = mes + '\n–ö–õ–ò–ï–ù–¢ - ' + str(db.get_record_by_id('Clients', line[2])[2])
                    mes = mes + '\n\n–û–¢–ó–´–í:\n' + str(line[3])
                    mes = mes + '\n\n–æ—Ç ' + str(line[1])
                    sendtoall(mes, '', 0)
        except Exception as e:
            logging.error(e)
            pass
        now = datetime.now()
        # if now.hour == 8 and now.minute == 0:
        #     await daylyreport.morning()
        if now.hour == 20 and now.minute == 0:
            await daylyreport.evening()
        daterep = str(datetime.now().strftime("%d.%m.%Y"))
        locations = []
        addedlocs = db.select_table_with_filters('Tasks', {'status': 1})
        conflocs = db.select_table_with_filters('Tasks', {'status': 2})
        donet = db.select_table_with_filters('Tasks', {'status': 3}, ['done'], [daterep+' 00:00'], [daterep+' 23:59'])
        canceled = db.select_table_with_filters('Tasks', {'status': 4}, ['canceled'], [daterep+' 00:00'], [daterep+' 23:59'])
        try:
            for task in addedlocs:
                company = db.get_record_by_id('Contragents', task[3])[1]
                status = db.get_record_by_id('Statuses', task[11])[1]
                name = '‚Ññ ' + str(task[0]) + '\n|=============================|\n' + str(company)
                description = status + '\n | \n' + task[4]
                location = db.get_record_by_id('Locations', task[12])
                if task[12] is not None and location is not None:
                    lat = location[3]
                    lon = location[4]
                else:
                    lat = 41.28921489333344
                    lon = 69.31288111459628
                locations.append([name, description, lat, lon, task[11]])
        except Exception as e:
            logging.info(e)
            pass
        try:
            for task in conflocs:
                company = db.get_record_by_id('Contragents', task[3])[1]
                status = db.get_record_by_id('Statuses', task[11])[1]
                user = db.get_record_by_id('Users', task[6])
                master = str(user[2]) + ' ' + str(user[1])
                name = '‚Ññ ' + str(task[0]) + '\n|=============================|\n' + str(company)
                description = status + ' - ' + master + '\n | \n' + task[4]
                if task[12] is None:
                    lat = 41.28921489333344
                    lon = 69.31288111459628
                else:
                    lat = db.get_record_by_id('Locations', task[12])[3]
                    lon = db.get_record_by_id('Locations', task[12])[4]
                locations.append([name, description, lat, lon, task[11]])
        except Exception as e:
            logging.info(e)
            pass
        try:
            for task in donet:
                company = db.get_record_by_id('Contragents', task[3])[1]
                status = db.get_record_by_id('Statuses', task[11])[1]
                user = db.get_record_by_id('Users', task[6])
                master = str(user[2]) + ' ' + str(user[1])
                name = '‚Ññ ' + str(task[0]) + '\n|=============================|\n' + str(company)
                description = status + ' - ' + master + '\n | \n' + task[4]
                if task[12] is None:
                    lat = 41.28921489333344
                    lon = 69.31288111459628
                else:
                    lat = db.get_record_by_id('Locations', task[12])[3]
                    lon = db.get_record_by_id('Locations', task[12])[4]
                locations.append([name, description, lat, lon, task[11]])
        except Exception as e:
            logging.info(e)
            pass
        try:
            for task in canceled:
                company = db.get_record_by_id('Contragents', task[3])[1]
                status = db.get_record_by_id('Statuses', task[11])[1]
                name = '‚Ññ ' + str(task[0]) + '\n|=============================|\n' + str(company)
                description = status + '\n | \n' + task[4]
                if task[12] is None:
                    lat = 41.28921489333344
                    lon = 69.31288111459628
                else:
                    lat = db.get_record_by_id('Locations', task[12])[3]
                    lon = db.get_record_by_id('Locations', task[12])[4]
                locations.append([name, description, lat, lon, task[11]])
        except Exception as e:
            logging.info(e)
            pass
        if len(locations) > 0:
            functions.mmapgen(locations)
            functions.mapgen(locations)
        await asyncio.sleep(15)
async def main():
    await job()
# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def sendtoall(message, markdown, exeptions, nt = 0, notific = False):
    global sendedmessages
    users = db.select_table('Users')
    for user in users:
        logging.info(f'sended message to user {user[2]} {user[1]}')
        try:
            if user[0] != exeptions:
                mes = bot.send_message(
                    user[0],
                    message,
                    reply_markup=markdown,
                    disable_notification=notific
                )
                if nt == 1:
                    sendedmessages.append([[user[0]], [mes.message_id]])
        except Exception as e:
            logging.error(e)
            pass
    return
# –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
def sendlocations(inn, message):
    locs = db.select_table_with_filters('Locations', {'inn': inn})
    if len(locs) > 0:
        for location in locs:
            loc = types.Location(location[4], location[3])
            bot.send_location(message.chat.id, loc.latitude, loc.longitude)
            bot.send_message(
                message.chat.id,
                str(location[2]),
                reply_markup=buttons.buttonsinline([['–ò–∑–º–µ–Ω–∏—Ç—å', 'location '+str(location[0])]])
            )
    else:
        return
# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ –æ—Ç—á–µ—Ç–∞–º
def sendrep(message, tasks):
    tasksl = functions.listgen(tasks, [0, 1, 3, 4, 6], 1)
    for task in tasksl:
        bot.send_message(
            message.chat.id,
            task,
            reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+task[0]]])
        )
    return
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
# def sendrepfile(message, tasks):
#     processing = bot.send_message(message.chat.id, '‚è≥')
#     rep = []
#     # —à–∞–ø–∫–∞
#     rep.append(['‚Ññ', '–ò–ù–ù', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–ó–∞—è–≤–∫–∞', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–º–∞—Å—Ç–µ—Ä'])

#     # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ –≤ —à–∞–ø–∫–µ
#     wb = openpyxl.Workbook()
#     ws = wb.active

#     for task in tasks:
#         manager = str(db.get_record_by_id('Users', task[2])[2]) + ' ' + str(db.get_record_by_id('Users', task[2])[1])
#         master = str(db.get_record_by_id('Users', task[6])[2]) + ' ' + str(db.get_record_by_id('Users', task[6])[1])
#         contr = (str(db.get_record_by_id('Contragents', task[3])[1]) if db.get_record_by_id('Contragents', task[3]) is not None else '')
#         line1 = [task[0], task[3], contr, task[4], task[1], manager, task[7], master]
#         rep.append(line1)

#     for row in rep:
#         ws.append(row)

#     # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã —è—á–µ–µ–∫
#     for column_cells in ws.columns:
#         max_length = 0
#         column = column_cells[0].column_letter
#         for cell in column_cells:
#             cell_value = str(cell.value)
#             if len(cell_value) > max_length:
#                 max_length = len(cell_value)
#         adjusted_width = (max_length + 2) * 1.2
#         ws.column_dimensions[column].width = adjusted_width

#     # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ C –∏ D
#     ws.column_dimensions['C'].width = 41.22
#     ws.column_dimensions['D'].width = 41.22

#     # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —è—á–µ–π–∫–∞—Ö
#     for row in ws.iter_rows():
#         for cell in row:
#             cell.alignment = Alignment(wrap_text=True)

#     # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
#     for row in ws.iter_rows(min_row=2):
#         for cell in row:
#             cell.alignment = Alignment(vertical='center', horizontal='left')

#     # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —à–∞–ø–∫–∏
#     for cell in ws[1]:
#         cell.alignment = Alignment(vertical='center', horizontal='center')
#         cell.font = openpyxl.styles.Font(bold=True)

#     # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü
#     thin_border = openpyxl.styles.Border(
#         left=openpyxl.styles.Side(style='thin'),
#         right=openpyxl.styles.Side(style='thin'),
#         top=openpyxl.styles.Side(style='thin'),
#         bottom=openpyxl.styles.Side(style='thin')
#     )
#     for row in ws.iter_rows():
#         for cell in row:
#             cell.border = thin_border

#     file_path = os.path.join(os.getcwd(), 'data.xlsx')
#     wb.save(file_path)
#     bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
#     bot.send_document(message.chat.id, open(file_path, 'rb'))
#     os.remove(file_path)


def sendrepfile(message, tasks):
    processing = bot.send_message(message.chat.id, '‚è≥')
    rep = []
    # —à–∞–ø–∫–∞
    rep.append(['‚Ññ', '–ò–ù–ù', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–ó–∞—è–≤–∫–∞', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–º–∞—Å—Ç–µ—Ä'])

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ –≤ —à–∞–ø–∫–µ
    wb = openpyxl.Workbook()
    ws = wb.active

    for task in tasks:
        manager = str(db.get_record_by_id('Users', task[2])[2]) + ' ' + str(db.get_record_by_id('Users', task[2])[1])
        master = str(db.get_record_by_id('Users', task[6])[2]) + ' ' + str(db.get_record_by_id('Users', task[6])[1])
        contr = (str(db.get_record_by_id('Contragents', task[3])[1]) if db.get_record_by_id('Contragents', task[3]) is not None else '')
        line1 = [task[0], task[3], contr, task[4], task[1], manager, task[7], master]
        rep.append(line1)

    for row in rep:
        ws.append(row)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã —è—á–µ–µ–∫
    for column_cells in ws.columns:
        max_length = 0
        column = column_cells[0].column_letter
        for cell in column_cells:
            cell_value = str(cell.value)
            if len(cell_value) > max_length:
                max_length = len(cell_value)
        adjusted_width = (max_length + 2) * 1.2
        ws.column_dimensions[column].width = adjusted_width

    # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ C –∏ D
    ws.column_dimensions['C'].width = 41.22
    ws.column_dimensions['D'].width = 41.22

    # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —è—á–µ–π–∫–∞—Ö
    for row in ws.iter_rows():
        for cell in row:
            cell.alignment = Alignment(wrap_text=True)

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
    for row in ws.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(vertical='center', horizontal='left')

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —à–∞–ø–∫–∏
    for cell in ws[1]:
        cell.alignment = Alignment(vertical='center', horizontal='center')
        cell.font = openpyxl.styles.Font(bold=True)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü
    thin_border = openpyxl.styles.Border(
        left=openpyxl.styles.Side(style='thin'),
        right=openpyxl.styles.Side(style='thin'),
        top=openpyxl.styles.Side(style='thin'),
        bottom=openpyxl.styles.Side(style='thin')
    )
    for row in ws.iter_rows():
        for cell in row:
            cell.border = thin_border

    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
    for row in ws.iter_rows(min_row=2):
        date1 = datetime.strptime(row[4].value, '%d.%m.%Y %H:%M')  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ E
        date2 = datetime.strptime(row[6].value, '%d.%m.%Y %H:%M')  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ G
        diff_hours = (date2 - date1).total_seconds() / 3600  # –†–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö
        if diff_hours < 24:
            for cell in row:
                cell.fill = openpyxl.styles.PatternFill(fgColor="C4FFC4", fill_type="solid")  # –°–≤–µ—Ç–ª–æ –∑–µ–ª–µ–Ω—ã–π
        elif 24 <= diff_hours < 72:
            for cell in row:
                cell.fill = openpyxl.styles.PatternFill(fgColor="FFFFCC", fill_type="solid")  # –°–≤–µ—Ç–ª–æ –∂–µ–ª—Ç—ã–π
        else:
            for cell in row:
                cell.fill = openpyxl.styles.PatternFill(fgColor="FFD3DB", fill_type="solid")  # –†–æ–∑–æ–≤—ã–π

    file_path = os.path.join(os.getcwd(), 'data.xlsx')
    wb.save(file_path)
    bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
    bot.send_document(message.chat.id, open(file_path, 'rb'))
    os.remove(file_path)


# –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
class daylyreport:
    # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ö–≤–æ—Å—Ç–æ–≤ —Å–ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π
    async def morning():
        logging.info('–ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
        confirmedtasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 2}), [0, 1, 3, 4, 6], 1)
        addedtasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 1}), [0, 1, 3, 4, 6], 1)
        if len(confirmedtasks) == 0 and len(addedtasks) == 0:
            sendtoall('–í—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫.', '', 0)
        else:
            sendtoall('–í—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–°–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ—Ö–æ–¥—è—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞—è–≤–∫–∏:', '', 0)
        if len(confirmedtasks) != 0:
            sendtoall('–ó–ê–Ø–í–ö–ò –£ –ú–ê–°–¢–ï–†–û–í:\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª', '', 0)
            for line in confirmedtasks:
                taskid = line.split()[2]
                sendtoall(line, buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]]), 0)
        if len(addedtasks) != 0:
            sendtoall('–ù–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –ó–ê–Ø–í–ö–ò:\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª', '', 0)
            for line in addedtasks:
                taskid = line.split()[2]
                sendtoall(line, buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]]), 0)
        sendtoall('üü•üü•üü•üü•üü•üü•üü•üü•\n–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\nüü•üü•üü•üü•üü•üü•üü•üü•', '', 0)
    # –ò—Ç–æ–≥–∏ –¥–Ω—è
    async def evening():
        logging.info('–ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
        daten = str(datetime.now().strftime("%d.%m.%Y"))
        donetasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 3}, ['done'], [daten+' 00:00'], [daten+' 23:59']), [0, 1, 3, 4, 6], 1)
        confirmedtasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 2}), [0, 1, 3, 4, 6], 1)
        addedtasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 1}), [0, 1, 3, 4, 6], 1)
        canceledtasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 4}, ['canceled'], [daten+' 00:00'], [daten+' 23:59']), [0, 1, 3, 4, 6], 1)
        if len(confirmedtasks) != 0 and len(addedtasks) != 0:
            sendtoall('–ò–¢–û–ì–ò –î–ù–Ø:\n–ù–∞ –∑–∞–≤—Ç—Ä–∞ –æ—Å—Ç–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞—è–≤–∫–∏:', '', 0)
        if len(donetasks) != 0:
            sendtoall('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª', '', 0)
            for line in donetasks:
                taskid = line.split()[2]
                sendtoall(line, buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]]), 0)
        if len(confirmedtasks) != 0:
            sendtoall('–ó–∞—è–≤–∫–∏ —É –º–∞—Å—Ç–µ—Ä–æ–≤\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª', '', 0)
            for line in confirmedtasks:
                taskid = line.split()[2]
                sendtoall(line, buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]]), 0)
        if len(addedtasks) != 0:
            sendtoall('–ù–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª', '', 0)
            for line in addedtasks:
                taskid = line.split()[2]
                sendtoall(line, buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]]), 0)
        if len(canceledtasks) != 0:
            sendtoall('–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª', '', 0)
            for line in canceledtasks:
                taskid = line.split()[2]
                sendtoall(line, buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]]), 0)
        reports = '\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ - ' + str(len(donetasks)) + '\n–ù–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö - ' + str(len(addedtasks)) + '\n–í —Ä–∞–±–æ—Ç–µ —É –º–∞—Å—Ç–µ—Ä–æ–≤ - ' + str(len(confirmedtasks)) + '\n–û—Ç–º–µ–Ω–µ–Ω–æ - ' + str(len(canceledtasks))
        if len(donetasks) == 0:
            reports = reports + '\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.'
        else:
            reports = reports + '\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞–º–∏:\n'
            users = db.select_table('Users')
            usersrep = []
            for i in users:
                tasks = len(db.select_table_with_filters('Tasks', {'master': i[0], 'status': 3}, ['done'], [daten+' 00:00'], [daten+' 23:59']))
                usersrep.append([i[2] + ' ' + i[1], tasks])
            sorted_usersrep = sorted(usersrep, key=lambda x: x[1], reverse=True)
            for j in sorted_usersrep:
                if j[1] != 0:
                    reports = reports + '\n' + j[0] + ' - ' + str(j[1])
        sendtoall('–ò–¢–û–ì–ò –î–ù–Ø\nüî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫' + reports, '', 0)

@bot.message_handler(commands=['start'])
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def check_user_id(message):
    user_id = message.from_user.id
    global ActiveUser, continue_polling
    try:
        username = db.get_record_by_id('Users', user_id)[2] + ' ' + db.get_record_by_id('Users', user_id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    except Exception as e:
        logging.error(e)
        pass
    continue_polling = True
    ActiveUser[user_id] = {'id': user_id}
    # finduser = db.search_record("Users", "id", user_id)
    user = db.get_record_by_id('Users', user_id)
    if user is None:
        bot.send_message(
            user_id,
            '–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
            reply_markup=buttons.Buttons(['üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
        )
        bot.register_next_step_handler(message, Reg.reg1)

    else:
        bot.send_message(
            user_id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
            reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
        )
        bot.register_next_step_handler(message, MainMenu.Main2)

@bot.message_handler(func=lambda message: True)
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def check_user_id(message):
    user_id = message.from_user.id
    global ActiveUser, continue_polling
    try:
        username = db.get_record_by_id('Users', user_id)[2] + ' ' + db.get_record_by_id('Users', user_id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    except Exception as e:
        logging.error(e)
        pass
    continue_polling = True
    ActiveUser[user_id] = {'id': user_id}
    # finduser = db.search_record("Users", "id", user_id)
    user = db.get_record_by_id('Users', user_id)
    if user is None:
        bot.send_message(
            user_id,
            '–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
            reply_markup=buttons.Buttons(['üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
        )
        bot.register_next_step_handler(message, Reg.reg1)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Reg:
    # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def reg1(message):
        try:
            username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
            logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        except Exception as e:
            logging.error(e)
            pass
        if message.text == 'üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
            bot.send_message(
                message.chat.id,
                '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç (—É–∫–∞–∂–∏—Ç–µ –∏–º—è)',
            reply_markup=buttons.clearbuttons()
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Reg.reg2)
        else:
            bot.send_message(
                message.chat.id,
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.',
                reply_markup=buttons.Buttons(['üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Reg.reg1)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Ñ–∞–º–∏–ª–∏–∏
    def reg2(message):
        try:
            username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
            logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        except Exception as e:
            logging.error(e)
            pass
        global ActiveUser
        ActiveUser[message.chat.id]['FirstName'] = message.text
        bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é.',
            reply_markup=buttons.clearbuttons()
        )
        bot.register_next_step_handler(message, Reg.reg3)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    def reg3(message):
        try:
            username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
            logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        except Exception as e:
            logging.error(e)
            pass
        global ActiveUser
        ActiveUser[message.chat.id]['LastName'] = message.text
        bot.send_message(
            message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (+998 00 000 0000).',
            reply_markup=buttons.clearbuttons()
        )
        bot.register_next_step_handler(message, Reg.reg4)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    def reg4(message):
        try:
            username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
            logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        except Exception as e:
            logging.error(e)
            pass
        global ActiveUser
        ActiveUser[message.chat.id]['PhoneNumber'] = message.text
        bot.send_message(
            message.chat.id,
            functions.conftext(message, ActiveUser),
            reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
        )
        bot.register_next_step_handler(message, Reg.reg5)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    def reg5(message):
        try:
            username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
            logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        except Exception as e:
            logging.error(e)
            pass
        global ActiveUser
        if message.text == '‚úÖ –î–∞':
            valuedict = [
                ActiveUser[message.chat.id]['id'],
                ActiveUser[message.chat.id]['FirstName'],
                ActiveUser[message.chat.id]['LastName'],
                ActiveUser[message.chat.id]['PhoneNumber']
            ]
            db.insert_record("Users", valuedict)
            bot.send_message(
                message.chat.id,
                '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!',
                reply_markup=buttons.Buttons(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, MainMenu.Main1)
        elif message.text == '‚õîÔ∏è –ù–µ—Ç':
            bot.send_message(
                message.chat.id,
                '–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ.',
                reply_markup=buttons.Buttons(['üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
            )
            bot.register_next_step_handler(message, Reg.reg1)
        else:
            bot.send_message(
                message.chat.id,
                '–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n' + functions.conftext(message, ActiveUser),
                reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Reg.reg5)
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
class MainMenu:
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    def Main1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, MainMenu.Main2)
    # –†–µ–∞–∫–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    def Main2(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser, continue_polling
        if message.text == 'üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞':
            ActiveUser[message.chat.id]['nt'] = 1
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù, –ü–ò–ù–§–õ –∏–ª–∏ —Å–µ—Ä–∏—é –ø–≤—Å—Å–ø–æ—Ä—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.\n–¢–∞–∫ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç–∏\n–ù–∞–ø—Ä–∏–º–∞—Ä:\nmonohrom\n–í—ã–¥–∞—Å—Ç –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞ —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å monohrom',
                reply_markup=buttons.Buttons(['üö´ –û—Ç–º–µ–Ω–∞'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, NewTask.nt1)
        elif message.text == 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫':
            daterep = str(datetime.now().strftime("%d.%m.%Y"))
            report.rep(message, daterep, 0, 1, 1, 0, 0)
        elif message.text == 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏':
            daterep = str(datetime.now().strftime("%d.%m.%Y"))
            report.rep(message, daterep, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1)
        elif message.text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏':
            daterep = str(datetime.now().strftime("%d.%m.%Y"))
            report.rep(message, daterep, 0, 1, 0, 1, 0, message.chat.id, 1)
        elif message.text == '/start':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º':
            bot.send_message(
                message.chat.id,
                '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º.\n—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ [–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é]',
                reply_markup=buttons.Buttons(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
            )
            if message.message_id is not None:
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

            bot.register_next_step_handler(message, allchats.chat1)
        elif message.text == 'üìà –û—Ç—á–µ—Ç—ã':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –æ—Ç—á–µ—Ç –í–∞–º –Ω—É–∂–µ–Ω\n–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏, –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏ –¥–Ω—è.',
                reply_markup=buttons.Buttons(['üìã –ó–∞—è–≤–∫–∏ —É –º–∞—Å—Ç–µ—Ä–æ–≤', 'üñ®Ô∏è –¢–µ—Ö–Ω–∏–∫–∞ —É –º–∞—Å—Ç–µ—Ä–æ–≤', 'üìä –ò—Ç–æ–≥–∏ –¥–Ω—è', 'üìÜ –ó–∞ –ø–µ—Ä–∏–æ–¥', 'üö´ –û—Ç–º–µ–Ω–∞'])
            )
            if message.message_id is not None:
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, report.reportall)
        elif message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞':
            contragents = db.select_table('Contragents', ['id', 'cname'])
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–ª–∏–µ–Ω—Ç–∞.\n–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
                reply_markup=buttons.Buttons(['üö´ –û—Ç–º–µ–Ω–∞'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, editcont.ec1)
        elif message.text == 'üó∫Ô∏è –ö–∞—Ä—Ç–∞':
            markup = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', url='http://81.200.149.148/map.html')
            markup.add(button)
            bot.send_message(
                message.chat.id,
                '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—É—â–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–∞ –∫–∞—Ä—Ç–µ',
                reply_markup=markup
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text is not None:
            if message.text.isdigit() or (len(message.text.split()) > 1 and message.text.split()[1].isdigit()):
                if message.text.isdigit():
                    taskid = message.text
                elif message.text.split()[1].isdigit():
                    taskid = message.text.split()[1]
                task = db.get_record_by_id('Tasks', taskid)
                tasks = functions.listgen([task], [0, 1, 3, 4, 6], 1)
                if task is not None:
                    bot.send_message(
                        message.chat.id,
                        tasks[0],
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        else:
            bot.register_next_step_handler(message, MainMenu.Main2)
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
class editcont():
    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –ò–ù–ù –∏ –≥–µ–Ω–µ—Ä–∞–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã def editcontragent(message)
    def ec1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.delete_message(chat_id=ActiveUser[message.chat.id]['sentmes'].chat.id, message_id=ActiveUser[message.chat.id]['sentmes'].message_id)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text.split()[0].isdigit():
            inn = message.text.split()[0]
            ActiveUser[message.chat.id]['inn'] = inn
            client = db.get_record_by_id('Contragents', ActiveUser[message.chat.id]['inn'])
            ActiveUser[message.chat.id]['contold'] = client
            ActiveUser[message.chat.id]['contnew'] = []
            for line in client:
                if line is None:
                    ActiveUser[message.chat.id]['contnew'].append(None)
                else:
                    ActiveUser[message.chat.id]['contnew'].append(line)
            if client is not None:
                editcontragent(message)
                bot.register_next_step_handler(message, editcont.ec2)
            else:
                bot.send_message(
                    message.chat.id,
                    '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
                bot.register_next_step_handler(message, MainMenu.Main2)
        else:
            processing = bot.send_message(message.chat.id, '‚è≥')
            contrs = db.select_table('Contragents')
            res = functions.search_items(message.text, contrs)
            contbuttons = []
            contbuttons.append('üö´ –û—Ç–º–µ–Ω–∞')
            if len(res) > 0:
                for i in res:
                    line = str(i[0]) + ' ' + str(i[1])
                    if len(contbuttons) < 20:
                        contbuttons.append(line)
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                try:
                    bot.send_message(
                        message.chat.id,
                        '–ï—Å–ª–∏ –Ω—É–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã—à–µ–ª –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ò–ù–ù, –ü–ò–ù–§–õ, —Å–µ—Ä–∏—é –ø–∞—Å—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.',
                        reply_markup=buttons.Buttons(contbuttons, 1)
                    )
                except Exception as e:
                    logging.error(e)
                    pass
            else:
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                bot.send_message(
                    message.chat.id,
                    '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                    reply_markup=buttons.Buttons(contbuttons, 1)
                )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, editcont.ec1)
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def ec2(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å':
            print(ActiveUser[message.chat.id]['contnew'])
            if ActiveUser[message.chat.id]['contnew'][0] != ActiveUser[message.chat.id]['contold'][0]:
                tasks = db.select_table_with_filters('Tasks', {'contragent': ActiveUser[message.chat.id]['contold'][0]})
                for task in tasks:
                    db.update_records(
                        'Tasks',
                        ['contragent'],
                        [ActiveUser[message.chat.id]['contnew'][0]],
                        'id',
                        task[0]
                    )
                locations = db.select_table_with_filters('Locations', {'inn': ActiveUser[message.chat.id]['contold'][0]})
                for location in locations:
                    db.update_records(
                        'Locations',
                        ['inn'],
                        [ActiveUser[message.chat.id]['contnew'][0]],
                        'id',
                        location[0]
                    )
            db.update_records(
                'Contragents',
                [
                    'id',
                    'cname',
                    'cadr',
                    'cperson',
                    'cphone',
                    'ds',
                    'contract'
                ],
                ActiveUser[message.chat.id]['contnew'],
                'id',
                ActiveUser[message.chat.id]['contold'][0]
            )
            bot.send_message(
                message.chat.id,
                '–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == 'üè∑Ô∏è –¢–ò–ü':
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ({message.text})',
                reply_markup=buttons.Buttons(['–†–∞–∑–æ–≤—ã–π', '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π', '–§–∏–∑. –ª–∏—Ü–æ'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, editcont.TYPE)
        elif message.text == 'üõ£Ô∏è –ê–î–†–ï–°':
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.',
                reply_markup=buttons.clearbuttons()
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, CADR1)
        elif message.text == 'üìç –õ–û–ö–ê–¶–ò–ò':
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ö–ê–¶–ò–ô –ö–û–ù–¢–†–ê–ì–ï–ù–¢–ê
            locations = db.select_table_with_filters('Locations', {'inn': ActiveUser[message.chat.id]['inn']})
            buttonsloc = []
            buttonsloc.append('üÜï –î–æ–±–∞–≤–∏—Ç—å')
            try:
                for location in locations:
                    buttonsloc.append(str(location[0]) + ' ' + str(location[2]))
            except Exception as e:
                logging.error(e)
                time.sleep(5)
            buttonsloc.append('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            if len(locations) > 2:
                bot.send_message(
                    message.chat.id,
                    '–≠—Ç–æ –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.',
                    reply_markup=buttons.Buttons(buttonsloc, 2)
                )
                bot.register_next_step_handler(message, editcont.locations1)
            else:
                bot.send_message(
                    message.chat.id,
                    '–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ª–æ–∫–∞—Ü–∏–∏.',
                    reply_markup=buttons.Buttons(buttonsloc, 2)
                )
                bot.register_next_step_handler(message, editcont.locations1)
        else:
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ({message.text})',
                reply_markup=buttons.clearbuttons()
            )
            if message.text == 'üÜî –ò–ù–ù':
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                bot.register_next_step_handler(message, editcont.INN)
            elif message.text == 'üè¢ –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï':
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                bot.register_next_step_handler(message, editcont.CNAME)
            elif message.text == 'üôã‚Äç‚ôÇÔ∏è –ö–û–ù–¢–ê–ö–¢–ù–û–ï –õ–ò–¶–û':
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                bot.register_next_step_handler(message, editcont.CPERSON)
            elif message.text == 'üìû –¢–ï–õ–ï–§–û–ù':
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                bot.register_next_step_handler(message, editcont.CPHONE)
            elif message.text == 'üìÑ –î–û–ì–û–í–û–†':
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                bot.register_next_step_handler(message, editcont.CCONTRACT)
    # –ò–ù–ù
    def INN(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text.isdigit():
            ActiveUser[message.chat.id]['contnew'][0] = message.text
            editcontragent(message)
            bot.register_next_step_handler(message, editcont.ec2)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –ò–ù–ù! \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, editcont.INN)
    # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞–∏–∏
    def CNAME(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        ActiveUser[message.chat.id]['contnew'][1] = message.text
        editcontragent(message)
        bot.register_next_step_handler(message, editcont.ec2)
    # –¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞ —Ä–∞–∑–æ–≤—ã–π –∏–ª–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π
    def TYPE(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == '–†–∞–∑–æ–≤—ã–π':
            ActiveUser[message.chat.id]['contnew'][5] = 1
        elif message.text == '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π':
            ActiveUser[message.chat.id]['contnew'][5] = 2
        elif message.text == '–§–∏–∑. –ª–∏—Ü–æ':
            ActiveUser[message.chat.id]['contnew'][5] = 3
        editcontragent(message)
        bot.register_next_step_handler(message, editcont.ec2)
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏–æ
    def CPERSON(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        ActiveUser[message.chat.id]['contnew'][3] = message.text
        editcontragent(message)
        bot.register_next_step_handler(message, editcont.ec2)
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    def CPHONE(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        ActiveUser[message.chat.id]['contnew'][4] = message.text
        editcontragent(message)
        bot.register_next_step_handler(message, editcont.ec2)
    # –ù–æ–º–µ—Ä –∏ –¥–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π)
    def CCONTRACT(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        ActiveUser[message.chat.id]['contnew'][6] = message.text
        editcontragent(message)
        bot.register_next_step_handler(message, editcont.ec2)
    # –ú–µ–Ω—é –∏ —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π
    def locations1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == 'üÜï –î–æ–±–∞–≤–∏—Ç—å':
            bot.send_message(
                message.chat.id,
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, newlocation)
        elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            editcontragent(message)
            bot.register_next_step_handler(message, editcont.ec2)
        elif message.text.split()[0].isdigit() and db.get_record_by_id('Locations', message.text.split()[0]) is not None:
            location = db.get_record_by_id('Locations', message.text.split()[0])
            loc = types.Location(location[4], location[3])
            bot.send_location(message.chat.id, loc.latitude, loc.longitude)
            ActiveUser[message.chat.id]['curlocation'] = location[0]
            bot.send_message(
                message.chat.id,
                f'–í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location[2]}',
                reply_markup=buttons.Buttons(['–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'üö´ –û—Ç–º–µ–Ω–∞'], 3)
            )
            bot.register_next_step_handler(message, editcont.locations2)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.'
            )
            bot.register_next_step_handler(message, editcont.locations1)
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
    def locations2(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é':
            bot.send_message(
                message.chat.id,
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é.',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, editcontlocation1)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ':
            bot.send_message(
                message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏.',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, editcont.locations3)
        elif message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å':
            locationtodelete = db.get_record_by_id('Locations', ActiveUser[message.chat.id]['curlocation'])[2]
            Contrlocation = db.get_record_by_id('Contragents', ActiveUser[message.chat.id]['inn'])[1]
            bot.send_message(
                message.chat.id,
                f'–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é {locationtodelete} —É {Contrlocation}?',
                reply_markup=buttons.Buttons(['‚úÖ –î–∞','‚õîÔ∏è –ù–µ—Ç'])
            )
            bot.register_next_step_handler(message, editcont.locations4)
        elif message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
            locations = db.select_table_with_filters('Locations', {'inn': ActiveUser[message.chat.id]['inn']})
            buttonsloc = []
            buttonsloc.append('üÜï –î–æ–±–∞–≤–∏—Ç—å')
            try:
                for location in locations:
                    buttonsloc.append(str(location[0]) + ' ' + str(location[2]))
            except Exception as e:
                logging.error(e)
                time.sleep(5)
            buttonsloc.append('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            if len(locations) > 2:
                bot.send_message(
                    message.chat.id,
                    '–≠—Ç–æ –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.',
                    reply_markup=buttons.Buttons(buttonsloc, 2)
                )
                bot.register_next_step_handler(message, editcont.locations1)
            else:
                bot.send_message(
                    message.chat.id,
                    '–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ª–æ–∫–∞—Ü–∏–∏.',
                    reply_markup=buttons.Buttons(buttonsloc, 2)
                )
                bot.register_next_step_handler(message, editcont.locations1)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
    def locations3(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        db.update_records(
            'Locations',
            ['name'],
            [message.text],
            'id',
            ActiveUser[message.chat.id]['curlocation']
        )
        bot.send_message(
            message.chat.id,
            '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
            reply_markup=buttons.Buttons(['–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'üö´ –û—Ç–º–µ–Ω–∞'], 3)
        )
        bot.register_next_step_handler(message, editcont.locations2)
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    def locations4(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == '‚úÖ –î–∞':
            db.delete_record('Locations', 'id', ActiveUser[message.chat.id]['curlocation'])
            bot.send_message(
                message.chat.id,
                '–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.',
                reply_markup=buttons.clearbuttons()
            )
            editcontragent(message)
            bot.register_next_step_handler(message, editcont.ec2)
        elif message.text == '‚õîÔ∏è –ù–µ—Ç':
            bot.send_message(
                message.chat.id,
                '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
                reply_markup=buttons.Buttons(['–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'üö´ –û—Ç–º–µ–Ω–∞'], 3)
            )
            bot.register_next_step_handler(message, editcont.locations2)
        else:
            locationtodelete = db.get_record_by_id('Locations', ActiveUser[message.chat.id]['curlocation'])[2]
            Contrlocation = db.get_record_by_id('Contragents', ActiveUser[message.chat.id]['inn'])[1]
            bot.send_message(
                message.chat.id,
                f'–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ.\n–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é {locationtodelete} —É {Contrlocation}?',
                reply_markup=buttons.Buttons(['‚úÖ –î–∞','‚õîÔ∏è –ù–µ—Ç'])
            )
            bot.register_next_step_handler(message, editcont.locations4)
# –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ —Ä–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
def editcontragent(message):
    try:
        bot.delete_message(chat_id=ActiveUser[message.chat.id]['edcon'].chat.id, message_id=ActiveUser[message.chat.id]['edcon'].message_id)
    except:
        pass
    mess = "–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï:\n" + str(ActiveUser[message.chat.id]['contnew'][1])
    mess = mess + '\n\n' + "–ò–ù–ù:\n" + str(ActiveUser[message.chat.id]['contnew'][0])
    if ActiveUser[message.chat.id]['contnew'][5] == 1:
        mess = mess + '\n\n' + "–¢–ò–ü:\n" + '–†–∞–∑–æ–≤—ã–π'
    elif ActiveUser[message.chat.id]['contnew'][5] == 2:
        mess = mess + '\n\n' + "–¢–ò–ü:\n" + '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π'
    elif ActiveUser[message.chat.id]['contnew'][5] == 3:
        mess = mess + '\n\n' + "–¢–ò–ü:\n" + '–§–∏–∑ –ª–∏—Ü–æ'
    else:
        mess = mess + '\n\n' + "–¢–ò–ü:\n" + '–ù–µ —É–∫–∞–∑–∞–Ω'
    mess = mess + '\n\n' + "–ê–î–†–ï–°:\n" + str(ActiveUser[message.chat.id]['contnew'][2])
    mess = mess + '\n\n' + "–ö–û–ù'üÜî –ò–ù–ù'–¢–ê–ö–¢–ù–û–ï –õ–ò–¶–û:\n" + str(ActiveUser[message.chat.id]['contnew'][3])
    mess = mess + '\n\n' + "–¢–ï–õ–ï–§–û–ù:\n" + str(ActiveUser[message.chat.id]['contnew'][4])
    mess = mess + '\n\n' + "–î–û–ì–û–í–û–†:\n" + str(ActiveUser[message.chat.id]['contnew'][6])
    mess = mess + '\n\n–ß–¢–û –í–´ –•–û–¢–ò–¢–ï –ò–ó–ú–ï–ù–ò–¢–¨?'
    ActiveUser[message.chat.id]['edcon'] = bot.send_message(
        message.chat.id,
        mess,
        reply_markup=buttons.Buttons(['üÜî –ò–ù–ù', 'üè¢ –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï', 'üè∑Ô∏è –¢–ò–ü', 'üõ£Ô∏è –ê–î–†–ï–°', 'üìç –õ–û–ö–ê–¶–ò–ò', 'üôã‚Äç‚ôÇÔ∏è –ö–û–ù–¢–ê–ö–¢–ù–û–ï –õ–ò–¶–û', 'üìû –¢–ï–õ–ï–§–û–ù', 'üìÑ –î–û–ì–û–í–û–†', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'üö´ –û—Ç–º–µ–Ω–∞'], 3)
    )
    return
# –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
class NewTask:
    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –ò–ù–ù
    def nt1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        ActiveUser[message.chat.id]['added'] = datetime.now().strftime("%d.%m.%Y %H:%M")
        ActiveUser[message.chat.id]['manager'] = message.chat.id
        ActiveUser[message.chat.id]['status'] = 1
        if message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.delete_message(chat_id=ActiveUser[message.chat.id]['sentmes'].chat.id, message_id=ActiveUser[message.chat.id]['sentmes'].message_id)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text.split()[0].isdigit():
            processing = bot.send_message(message.chat.id, '‚è≥')
            if message.text.split()[0].isdigit():
                inn = message.text.split()[0]
            else:
                inn = message.text.split()[1]
            ActiveUser[message.chat.id]['inn'] = inn
            findcont = db.get_record_by_id('Contragents', inn)
            if findcont == None:
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                bot.send_message(
                    message.chat.id,
                    '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –í–∞–º–∏ –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞',
                    reply_markup=buttons.Buttons(['–†–∞–∑–æ–≤—ã–π', '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π', '–§–∏–∑. –ª–∏—Ü–æ'])
                )
                bot.register_next_step_handler(message, NewTask.NeContr1)
            else:
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                client = db.get_record_by_id('Contragents', inn)
                if client[5] is not None and ActiveUser[message.chat.id]['nt'] == 1:
                    bot.send_message(
                        message.chat.id,
                        '–í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç - ' + str(client[1]) + '\n–ó–∞—è–≤–∫–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞?',
                        reply_markup=buttons.Buttons(['üìù –ó–∞—è–≤–∫–∞','üñ®Ô∏è –¢–µ—Ö–Ω–∏–∫–∞'])
                    )
                    bot.register_next_step_handler(message, NewTask.tech1)
                elif ActiveUser[message.chat.id]['nt'] == 0:
                    ActiveUser[message.chat.id]['changecontrintask'] = inn
                    bot.send_message(
                        message.chat.id,
                        f'–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –∑–∞—è–≤–∫–∏ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {str(client[1])}',
                        reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
                    )
                    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    bot.register_next_step_handler(message, Task.task6)
                else:
                    bot.send_message(
                        message.chat.id,
                        '–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ - ' + str(client[1]) + ' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∏ –¥–æ–≥–æ–≤–æ—Ä.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞.',
                        reply_markup=buttons.Buttons(['–†–∞–∑–æ–≤—ã–π', '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π', '–§–∏–∑. –ª–∏—Ü–æ'])
                    )
                    bot.register_next_step_handler(message, NewTask.type1)
        else:
            processing = bot.send_message(message.chat.id, '‚è≥')
            contrs = db.select_table('Contragents')
            res = functions.search_items(message.text, contrs)
            contbuttons = []
            contbuttons.append('üö´ –û—Ç–º–µ–Ω–∞')
            if len(res) > 0:
                for i in res:
                    line = str(i[0]) + ' ' + str(i[1])
                    if len(contbuttons) < 20:
                        contbuttons.append(line)
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                try:
                    bot.send_message(
                        message.chat.id,
                        '–ï—Å–ª–∏ –Ω—É–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã—à–µ–ª –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ò–ù–ù, –ü–ò–ù–§–õ, —Å–µ—Ä–∏—é –ø–∞—Å—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.',
                        reply_markup=buttons.Buttons(contbuttons, 1)
                    )
                except Exception as e:
                    logging.error(e)
                    pass
            else:
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                bot.send_message(
                    message.chat.id,
                    '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                    reply_markup=buttons.Buttons(contbuttons, 1)
                )
            bot.register_next_step_handler(message, NewTask.nt1)
    # –¢–µ—Ö–Ω–∏–∫–∞
    def tech1(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == 'üìù –ó–∞—è–≤–∫–∞':
            bot.send_message(
                message.chat.id,
                '–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫–ª–∏–µ–Ω—Ç–∞...',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, NewTask.ntlocation1)
        elif message.text == 'üñ®Ô∏è –¢–µ—Ö–Ω–∏–∫–∞':
            ActiveUser[message.chat.id]['status'] = 5
            bot.send_message(
                message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è...',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, NewTask.tech2)
    def tech2(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        ActiveUser[message.chat.id]['task'] = message.text
        bot.send_message(
            message.chat.id,
            '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–µ—Ö–Ω–∏–∫–æ–π...',
            reply_markup=buttons.clearbuttons()
        )
        bot.register_next_step_handler(message, NewTask.tech3)
    def tech3(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        ActiveUser[message.chat.id]['task'] = ActiveUser[message.chat.id]['task'] + '\n======================\n' + message.text
        bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∏ –¥–∞—Ç—É...\n–ü—Ä–∏–º–µ—Ä:\n‚Ññ 10 –æ—Ç 01.01.2023',
            reply_markup=buttons.clearbuttons()
        )
        bot.register_next_step_handler(message, NewTask.nt2)
    # –¢–∏–ø —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    def type1(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == '–†–∞–∑–æ–≤—ã–π':
            ActiveUser[message.chat.id]['ds'] = 1
            bot.send_message(
                message.chat.id,
                '–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫–ª–∏–µ–Ω—Ç–∞',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, NewTask.ntlocation1)
        elif message.text == '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π':
            ActiveUser[message.chat.id]['ds'] = 2
            bot.send_message(
                message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞.',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, NewTask.type2)
        elif message.text == '–§–∏–∑. –ª–∏—Ü–æ':
            ActiveUser[message.chat.id]['ds'] = 3
            bot.send_message(
                message.chat.id,
                '–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫–ª–∏–µ–Ω—Ç–∞',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, NewTask.ntlocation1)
        else:
            bot.send_message(
                message.chat.id,
                '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞.',
                reply_markup=buttons.Buttons(['–†–∞–∑–æ–≤—ã–π', '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π', '–§–∏–∑. –ª–∏—Ü–æ'])
            )
            bot.register_next_step_handler(message, NewTask.type1)
    def type2(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        ActiveUser[message.chat.id]['contract'] = message.text
        db.update_records(
            "Contragents",
            ["ds", "contract"],
            [ActiveUser[message.chat.id]['ds'], ActiveUser[message.chat.id]['contract']],
            "id", ActiveUser[message.chat.id]['inn']
        )
        bot.send_message(
            message.chat.id,
            '–ó–∞—è–≤–∫–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞?',
            reply_markup=buttons.Buttons(['üìù –ó–∞—è–≤–∫–∞','üñ®Ô∏è –¢–µ—Ö–Ω–∏–∫–∞'])
        )
        bot.register_next_step_handler(message, NewTask.tech1)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ –ò–ù–ù
    def innerror(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == '–í–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞':
            contragents = db.select_table('Contragents', ['id', 'cname'])
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ò–ù–ù.',
                reply_markup=buttons.Buttons(functions.listgen(contragents, [0, 1], 2))
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, NewTask.nt1)
        elif message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            ActiveUser[message.chat.id].clear()
            bot.send_message(
                message.chat.id,
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, MainMenu.Main2)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    def NeContr1(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == '–†–∞–∑–æ–≤—ã–π':
            ActiveUser[message.chat.id]['ds'] = 1
            ActiveUser[message.chat.id]['contract'] = '...'
            bot.send_message(
                message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, NewTask.NeContr3)
        elif message.text == '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π':
            ActiveUser[message.chat.id]['ds'] = 2
            bot.send_message(
                message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞..',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, NewTask.NeContr2)
        elif message.text == '–§–∏–∑. –ª–∏—Ü–æ':
            ActiveUser[message.chat.id]['ds'] = 3
            ActiveUser[message.chat.id]['contract'] = '...'
            bot.send_message(
                message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –§.–ò.–û. –∫–ª–∏–µ–Ω—Ç–∞.',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, NewTask.NeContr3)
        else:
            bot.send_message(
                message.chat.id,
                '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞.',
                reply_markup=buttons.Buttons(['–†–∞–∑–æ–≤—ã–π', '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π', '–§–∏–∑. –ª–∏—Ü–æ'])
            )
            bot.register_next_step_handler(message, NewTask.NeContr1)
    def NeContr2(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        ActiveUser[message.chat.id]['contract'] = message.text
        bot.send_message(
            message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.',
            reply_markup=buttons.clearbuttons()
        )
        bot.register_next_step_handler(message, NewTask.NeContr3)
    def NeContr3(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        ActiveUser[message.chat.id]['cname'] = message.text
        bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.',
            reply_markup=buttons.clearbuttons()
        )

        if ActiveUser[message.chat.id]['ds'] == 3:
            bot.register_next_step_handler(message, NeContr5)

        else:
            bot.register_next_step_handler(message, NeContr4)
    def NeContr6(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        ActiveUser[message.chat.id]['cphone'] = message.text
        ActiveUser[message.chat.id]['mess'] = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n'
        if ActiveUser[message.chat.id]['ds'] == 1:
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '–†–∞–∑–æ–≤—ã–π\n'
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ' + ActiveUser[message.chat.id]['cname']
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: ' + ActiveUser[message.chat.id]['cperson']
        elif ActiveUser[message.chat.id]['ds'] == 2:
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π\n'
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ' + ActiveUser[message.chat.id]['cname']
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '\n–î–æ–≥–æ–≤–æ—Ä: ' + ActiveUser[message.chat.id]['contract']
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: ' + ActiveUser[message.chat.id]['cperson']
        elif ActiveUser[message.chat.id]['ds'] == 3:
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '–§–∏–∑. –ª–∏—Ü–æ\n'
            ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '\n–§ –ò –û: ' + ActiveUser[message.chat.id]['cname']
        ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '\n–ê–¥—Ä–µ—Å: ' + ActiveUser[message.chat.id]['cadr']
        ActiveUser[message.chat.id]['mess'] = ActiveUser[message.chat.id]['mess'] + '\n–¢–µ–ª–µ—Ñ–æ–Ω: ' + ActiveUser[message.chat.id]['cphone']
        bot.send_message(
            message.chat.id,
            ActiveUser[message.chat.id]['mess'],
            reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
        )
        bot.register_next_step_handler(message, NewTask.NeContr7)
    def NeContr7(message):
        if message.text == '‚úÖ –î–∞':
            username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
            logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
            global ActiveUser
            contragent = [
                ActiveUser[message.chat.id]['inn'],
                ActiveUser[message.chat.id]['cname'],
                ActiveUser[message.chat.id]['cadr'],
                ActiveUser[message.chat.id]['cperson'],
                ActiveUser[message.chat.id]['cphone'],
                ActiveUser[message.chat.id]['ds'],
                ActiveUser[message.chat.id]['contract']
            ]
            db.insert_record('Contragents', contragent)
            if ActiveUser[message.chat.id]['nt'] == 0:
                ActiveUser[message.chat.id]['changecontrintask'] = ActiveUser[message.chat.id]['inn']
                client = db.get_record_by_id('Contragents', ActiveUser[message.chat.id]['changecontrintask'])
                bot.send_message(
                    message.chat.id,
                    f'–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –∑–∞—è–≤–∫–∏ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {str(client[1])}',
                    reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
                )
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                bot.register_next_step_handler(message, Task.task6)
            elif ActiveUser[message.chat.id]['nt'] == 1:
                bot.send_message(
                    message.chat.id,
                    '–ó–∞—è–≤–∫–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞?',
                    reply_markup=buttons.Buttons(['üìù –ó–∞—è–≤–∫–∞','üñ®Ô∏è –¢–µ—Ö–Ω–∏–∫–∞'])
                )
                bot.register_next_step_handler(message, NewTask.tech1)
        elif message.text == '‚õîÔ∏è –ù–µ—Ç':
            bot.send_message(
                message.chat.id,
                '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        else:
            bot.send_message(
                message.chat.id,
                '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n' + ActiveUser[message.chat.id]['mess'],
                reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
            )
            bot.register_next_step_handler(message, NewTask.NeContr7)
    # –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
    def ntlocation1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if ActiveUser[message.chat.id]['status'] == 1:
            ActiveUser[message.chat.id]['task'] = message.text
        else:
            ActiveUser[message.chat.id]['task'] = ActiveUser[message.chat.id]['task'] + '\n======================\n' + message.text
        locations = db.select_table_with_filters('Locations', {'inn': ActiveUser[message.chat.id]['inn']})
        clocations = ['‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
        if len(locations) > 0:
            for i in locations:
                line = str(i[0]) + ' ' + str(i[2])
                clocations.append(line)
            clocations.append('üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª')
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞',
                reply_markup=buttons.Buttons(clocations,2)
            )
        else:
            clocations.append('üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª')
            bot.send_message(
                message.chat.id,
                '–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π!\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.',
                reply_markup=buttons.Buttons(clocations)
            )
        bot.register_next_step_handler(message, NewTask.ntlocation2)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–π
    def ntlocation2(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            ActiveUser[message.chat.id]['location'] = None
            conf(message)
            bot.register_next_step_handler(message, NewTask.nt3)
        elif message.text == 'üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª':
            bot.send_message(
                message.chat.id,
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, newlocationintask1)
        elif len(message.text.split()) > 0 and message.text.split()[0].isdigit():
            if message.text.split()[0].isdigit():
                ActiveUser[message.chat.id]['location'] = int(message.text.split()[0])
                conf(message)
                bot.register_next_step_handler(message, NewTask.nt3)
            else:
                bot.send_message(
                    message.chat.id,
                    '–û—à–∏–±–∫–∞ –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.',
                    reply_markup=buttons.clearbuttons()
                )
                bot.register_next_step_handler(message, NewTask.ntlocation1)
        else:
            contloc = db.select_table_with_filters('Locations', {'inn': ActiveUser[message.chat.id]['inn']})
            res = functions.search_items(message.text, contloc)
            but = []
            but.append('‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
            if len(res) > 0:
                for r in res:
                    line = str(r[0]) + ' ' + str(r[2])
                    but.append(line)
                but.append('üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª')
                bot.send_message(
                    message.chat.id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞',
                    reply_markup=buttons.Buttons(but, 2)
                )
                bot.register_next_step_handler(message, NewTask.ntlocation2)
            else:
                but.append('üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª')
                bot.send_message(
                    message.chat.id,
                    '–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª–∏–∞–ª',
                    reply_markup=buttons.Buttons(but)
                )
                bot.register_next_step_handler(message, NewTask.ntlocation2)  
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    def nt2(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser, continue_polling
        ActiveUser[message.chat.id]['location'] = 999
        ActiveUser[message.chat.id]['task'] = ActiveUser[message.chat.id]['task'] + '\n======================\n' + message.text
        conf(message)
        bot.register_next_step_handler(message, NewTask.nt3)
    def nt3(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser, continue_polling
        processing = bot.send_message(message.chat.id, '‚è≥')
        if message.text == '‚úÖ –î–∞':
            task = [
                None,
                ActiveUser[message.chat.id]['added'],
                ActiveUser[message.chat.id]['manager'],
                ActiveUser[message.chat.id]['inn'],
                ActiveUser[message.chat.id]['task'],
                None,
                None,
                None,
                None,
                None,
                None,
                ActiveUser[message.chat.id]['status'],
                ActiveUser[message.chat.id]['location']
            ]
            db.insert_record('Tasks',task)
            tid = db.get_last_record('Tasks')[0]
            sendtoall(functions.curtask(tid), buttons.buttonsinline([['üëç –ü—Ä–∏–Ω—è—Ç—å', 'confirm ' + str(tid)], ['üìé –ù–∞–∑–Ω–∞—á–∏—Ç—å', 'set ' + str(tid)]]), message.chat.id, 1)
            bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
            bot.send_message(
                message.chat.id,
                '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n–í—ã–±–µ—Ä—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            continue_polling = True
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == '‚õîÔ∏è –ù–µ—Ç':
            bot.send_message(
                message.chat.id,
                '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.\n–í—ã–±–µ—Ä—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
            bot.register_next_step_handler(message, MainMenu.Main2)
        else:
            bot.send_message(
                message.chat.id,
                '–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?',
                reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
            bot.register_next_step_handler(message, NewTask.nt3)
# —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
def conf(message):
    confmes = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É. \n–ó–∞—è–≤–∫–∞ –æ—Ç: '
    confmes = confmes + ActiveUser[message.chat.id]['added']
    record = db.get_record_by_id('Contragents', ActiveUser[message.chat.id]['inn'])
    if ActiveUser[message.chat.id]['location'] is not None:
        location = db.get_record_by_id('Locations', ActiveUser[message.chat.id]['location'])[2]
    else:
        location = ''
    confmes = confmes + '\n–ö–ª–∏–µ–Ω—Ç: ' + (record[1] if record[1] is not None else '') + (f" {location}" if ActiveUser[message.chat.id]['location'] is not None else '')
    confmes = confmes + '\n–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: ' + ActiveUser[message.chat.id]['task']
    confmes = confmes + '\n–ê–¥—Ä–µ—Å: ' + (record[2] if record[2] is not None else '')
    confmes = confmes + '\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: ' + (record[3] if record[3] is not None else '')
    confmes = confmes + '\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: ' + (record[4] if record[4] is not None else '')
    bot.send_message(
        message.chat.id,
        confmes,
        reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
    )
    return
# –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è
class Task:

    def task1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser, continue_polling
        if message.text == 'üëç –ü—Ä–∏–Ω—è—Ç—å':
            processing = bot.send_message(message.chat.id, '‚è≥')
            if db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[11] == 5:
                stat = 6
            else:
                stat = 2
            if db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[11] == 1 or db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[11] == 5:
                db.update_records(
                    'Tasks',
                    [
                        'confirmed',
                        'master',
                        'status'
                    ], [
                        datetime.now().strftime("%d.%m.%Y %H:%M"),
                        message.chat.id, stat
                    ],
                    'id',
                    ActiveUser[message.chat.id]['task']
                )
                tk = functions.curtask(ActiveUser[message.chat.id]['task'])
                mes = str(db.get_record_by_id('Users', message.chat.id)[2]) + ' ' + str(db.get_record_by_id('Users', message.chat.id)[1]) + '\n–ü—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É:\n\n' + tk
                mark = ''
                exn = message.chat.id
                if sendedmessages is not None:
                    for line in sendedmessages:
                        try:
                            bot.delete_message(line[0], line[1])
                        except Exception as e:
                            logging.error(e)
                sendtoall(mes, mark, exn)
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                bot.send_message(
                    message.chat.id,
                    '–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É!",
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            continue_polling = True
        elif message.text == 'üñäÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å':
            bot.send_message(
                message.chat.id,
                '–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å...',
                reply_markup=buttons.clearbuttons()
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Task.task5)
        elif message.text == 'üìé –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å' or message.text == 'üìé –ù–∞–∑–Ω–∞—á–∏—Ç—å':
            users = db.select_table('Users')
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞...',
                reply_markup=buttons.Buttons(functions.listgen(users, [0, 1, 2], 3), 1)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Task.task4)
        elif message.text == '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ':
            processing = bot.send_message(message.chat.id, '‚è≥')
            manager = str(db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[6])
            if manager == str(message.chat.id):
                if db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[11] == 2:
                    stat = 3
                else:
                    stat = 7
                db.update_records(
                    'Tasks',[
                        'done',
                        'status'
                    ],[
                        datetime.now().strftime("%d.%m.%Y %H:%M"),
                        stat
                    ],
                    'id',
                    ActiveUser[message.chat.id]['task']
                )
                tk = functions.curtask(ActiveUser[message.chat.id]['task'])
                mes = str(db.get_record_by_id('Users', message.chat.id)[2]) + ' ' + str(db.get_record_by_id('Users', message.chat.id)[1]) + '\n–í—ã–ø–æ–ª–Ω–∏–ª –∑–∞—è–≤–∫—É:\n\n' + tk
                mark = ''
                exn = message.chat.id
                sendtoall(mes, mark, exn)
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                bot.send_message(
                    message.chat.id,
                    '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞—è–≤–∫—É.',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
                continue_polling = True
        elif message.text == 'üôÖ‚Äç‚ôÇÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏':
            manager = str(db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[6])
            if manager == str(message.chat.id):
                processing = bot.send_message(message.chat.id, '‚è≥')
                confdate = db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[5]
                db.update_records(
                    'Tasks',
                    [
                        'more',
                        'master',
                        'status'
                    ], [
                        '–ú–∞—Å—Ç–µ—Ä ' + str(db.get_record_by_id('Users', message.chat.id)[2]) + ' ' + str(db.get_record_by_id('Users', message.chat.id)[1]) + ' –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É ' + str(confdate) + '.\n ' + str(datetime.now().strftime("%d.%m.%Y %H:%M")) + '–æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        '',
                        1
                    ],
                    'id',
                    ActiveUser[message.chat.id]['task']
                )
                tk = functions.curtask(ActiveUser[message.chat.id]['task'])
                mes = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(db.get_record_by_id('Users', message.chat.id)[1]) + '–û—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏:\n\n' + tk
                mark = ''
                exn = message.chat.id
                sendtoall(mes, mark, exn)
                bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
                bot.send_message(
                    message.chat.id,
                    '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞—è–≤–∫–∏.',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
                continue_polling = True
            else:
                master = db.get_record_by_id('Users', manager)[1]
                bot.send_message(
                    message.chat.id,
                    '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –∑–∞—è–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –í–∞—à–∞.\n–ó–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª ' + str(master),
                    reply_markup=buttons.Buttons(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
                )
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        elif message.text == 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
            manager = str(db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[2])
            bot.send_message(
                message.chat.id,
                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?',
                reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Task.task2)
        elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            continue_polling = True
        elif message.text == 'ü§µ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞':
            bot.send_message(
                message.chat.id,
                '–≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞',
                reply_markup=buttons.clearbuttons()
            )
            ActiveUser[message.chat.id]['nt'] = 0
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, NewTask.nt1)
        elif message.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏':
            bot.send_message(
                message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏.\n\n‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n–£—á—Ç–∏—Ç–µ —á—Ç–æ —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º –ø–æ—ç—Ç–æ–º—É —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ä—ã–π –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ.',
                reply_markup=buttons.clearbuttons()
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Task.task7_1)
        elif message.text == 'üìç –õ–æ–∫–∞—Ü–∏—è':
            print('üìç –õ–æ–∫–∞—Ü–∏—è')
            location = db.get_record_by_id('Locations', db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[12])
            if location is not None:
                loc = types.Location(location[4], location[3])
                bot.send_location(message.chat.id, loc.latitude, loc.longitude)
                bot.send_message(
                    message.chat.id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                    reply_markup=buttons.Buttons(['üìç –£–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é', 'üö´ –û—Ç–º–µ–Ω–∞'])
                )
                bot.register_next_step_handler(message, Task.locations1)
            else:
                bot.send_message(
                    message.chat.id,
                    '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –Ω–æ —É–∫–∞–∑–∞–Ω–Ω–∞—è –ª–æ–∫–∞–∏—è –ª–∏–±–æ –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                    reply_markup=buttons.Buttons(['üìç –£–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é', 'üö´ –û—Ç–º–µ–Ω–∞'])
                )
                bot.register_next_step_handler(message, Task.locations1)
        else:
            bot.send_message(
                message.chat.id,
                '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )

    def locations1(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
            print('–ù–∞–∂–∞—Ç–∞ –æ—Ç–º–µ–Ω–∞')
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
        elif message.text == 'üìç –£–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é':
            inn = db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[3]
            locations = db.select_table_with_filters('Locations', {'inn': inn})
            buttonsloc = []
            buttonsloc.append('üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª')
            if len(locations) > 0:
                for location in locations:
                    line = str(location[0]) + ' ' + str(location[2])
                    print(line)
                    buttonsloc.append(line)
            buttonsloc.append('üö´ –û—Ç–º–µ–Ω–∞')
            print(buttonsloc)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª',
                reply_markup=buttons.Buttons(buttonsloc, 2)
            )
            bot.register_next_step_handler(message, Task.locations2)

    def locations2(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        ActiveUser[message.chat.id]['inn'] = db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[3]
        if message.text == 'üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª':
            bot.send_message(
                message.chat.id,
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, tnl1)
        elif message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            continue_polling = True
        elif message.text.split()[0].isdigit():
            selected = db.get_record_by_id('Locations', message.text.split()[0])
            db.update_records(
                'Tasks',
                ['location'],
                [selected[0]],
                'id',
                ActiveUser[message.chat.id]['task']
            )
            bot.send_message(
                message.chat.id,
                f'–í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è {selected[2]}',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            continue_polling = True
        else:
            inn = db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[3]
            locations = db.select_table_with_filters('Locations', {'inn': inn})
            buttonsloc = []
            buttonsloc.append('üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª')
            if len(locations) > 0:
                for location in locations:
                    buttonsloc.append(str(location[0]) + ' ' + str(location[2]))
            buttonsloc.append('üö´ –û—Ç–º–µ–Ω–∞')
            if len(locations) > 0:
                bot.send_message(
                    message.chat.id,
                    '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª',
                    reply_markup=buttons.Buttons(buttonsloc, 2)
                )
            bot.register_next_step_handler(message, Task.locations2)

    def task2(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == '‚úÖ –î–∞':
            bot.send_message(
                message.chat.id,
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.',
                reply_markup=buttons.clearbuttons()
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Task.task3)
        elif message.text == '‚õîÔ∏è –ù–µ—Ç':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    def task3(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        processing = bot.send_message(message.chat.id, '‚è≥')
        db.update_records(
            'Tasks',[
                'canceled',
                'userc',
                'more',
                'status'
            ],[
                datetime.now().strftime("%d.%m.%Y %H:%M"),
                message.chat.id,
                message.text,
                4
            ],
            'id',
            ActiveUser[message.chat.id]['task']
        )
        tk = functions.curtask(ActiveUser[message.chat.id]['task'])
        mes = str(db.get_record_by_id('Users', message.chat.id)[2]) + ' ' + str(db.get_record_by_id('Users', message.chat.id)[1]) + '\n–û—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É:\n\n' + tk + '\n\n–ü–†–ò–ß–ò–ù–ê:\n' + message.text
        mark = ''
        exn = message.chat.id
        sendtoall(mes, mark, exn)
        bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
        bot.send_message(
            message.chat.id,
            '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
            reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
        )
        continue_polling = True

    def task4(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[11] == 5:
            stat = 6
        else:
            stat = 2
        if message.text.split()[1] is None:
            users = db.select_table('Users')
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞...',
                reply_markup=buttons.Buttons(functions.listgen(users, [0, 1, 2], 3), 1)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, Task.task4)
        else:
            processing = bot.send_message(message.chat.id, '‚è≥')
            userm = message.text.split()[1]
            
            db.update_records(
                'Tasks',
                [
                    'confirmed',
                    'master',
                    'status'
                ], [
                    datetime.now().strftime("%d.%m.%Y %H:%M"),
                    userm, stat
                ],
                'id',
                ActiveUser[message.chat.id]['task']
            )
            if sendedmessages is not None:
                for line in sendedmessages:
                    try:
                        bot.delete_message(line[0], line[1])
                    except Exception as e:
                        logging.error(e)
            tk = functions.curtask(ActiveUser[message.chat.id]['task'])
            mes = str(db.get_record_by_id('Users', userm)[2]) + ' ' + str(db.get_record_by_id('Users', userm)[1]) + '\n–±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞—è–≤–∫–∏:\n\n' + tk
            exn = message.chat.id
            sendtoall(mes, '', exn)
            bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
            bot.send_message(
                message.chat.id,
                '–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            continue_polling = True

    def task5(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        processing = bot.send_message(message.chat.id, '‚è≥')
        tasktext = db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[4]
        db.update_records(
            'Tasks',
            ['task'],
            [tasktext + '\n\n ' + username + ' –¥–æ–ø–æ–ª–Ω–∏–ª(–∞) –∑–∞—è–≤–∫—É...\n' + message.text],
            'id',
            ActiveUser[message.chat.id]['task']
        )
        tk = functions.curtask(ActiveUser[message.chat.id]['task'])
        mes = str(db.get_record_by_id('Users', message.chat.id)[2]) + ' ' + str(db.get_record_by_id('Users', message.chat.id)[1]) + '\n –¥–æ–ø–æ–ª–Ω–∏–ª(–∞) –∑–∞—è–≤–∫—É:\n\n' + tk
        mark = ''
        exn = message.chat.id
        sendtoall(mes, mark, exn)
        if sendedmessages is not None:
            for line in sendedmessages:
                try:
                    bot.delete_message(line[0], line[1])
                except Exception as e:
                    logging.error(e)
        bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
        bot.send_message(
            message.chat.id,
            '–ó–∞—è–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
            reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
        )
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        continue_polling = True

    def task6(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == '‚úÖ –î–∞':
            processing = bot.send_message(message.chat.id, '‚è≥')
            db.update_records(
                'Tasks',
                ['contragent'],
                [ActiveUser[message.chat.id]['changecontrintask']],
                'id',
                ActiveUser[message.chat.id]['task']
            )
            client = db.get_record_by_id('Contragents', ActiveUser[message.chat.id]['changecontrintask'])[1]
            tk = functions.curtask(ActiveUser[message.chat.id]['task'])
            mes = str(db.get_record_by_id('Users', message.chat.id)[2]) + ' ' + str(db.get_record_by_id('Users', message.chat.id)[1]) + '\n –ò–∑–º–µ–Ω–∏–ª(–∞) –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞—è–≤–∫–µ:\n\n' + tk
            mark = ''
            sendtoall(mes, mark, message.chat.id)
            bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
            bot.send_message(
                message.chat.id,
                f'–ö–ª–∏–µ–Ω—Ç –≤ –∑–∞—è–≤–∫–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {client}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            continue_polling = True
        elif message.text == '‚õîÔ∏è –ù–µ—Ç':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                reply_markup=buttons.Buttons(['‚úÖ –î–∞', '‚õîÔ∏è –ù–µ—Ç'])
            )
            bot.register_next_step_handler(message, Task.task6)

    def task7_1(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        taskt = db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[4]
        ActiveUser[message.chat.id]['newtasktext'] = message.text
        bot.send_message(
            message.chat.id,
            f'–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫—É –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω —Å:\n{taskt}\n–ù–∞:\n{message.text}\n\n –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...',
            reply_markup=buttons.Buttons(['‚úÖ –î–∞','‚õîÔ∏è –ù–µ—Ç'])
        )
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.register_next_step_handler(message, Task.task7_2)

    def task7_2(message):
        global ActiveUser, continue_polling
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == '‚úÖ –î–∞':
            processing = bot.send_message(message.chat.id, '‚è≥')
            print(ActiveUser[message.chat.id]['newtasktext'])
            db.update_records(
                'Tasks',
                ['task'],
                [ActiveUser[message.chat.id]['newtasktext']],
                'id',
                ActiveUser[message.chat.id]['task']
            )
            tk = functions.curtask(ActiveUser[message.chat.id]['task'])
            mes = str(db.get_record_by_id('Users', message.chat.id)[2]) + ' ' + str(db.get_record_by_id('Users', message.chat.id)[1]) + '\n –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞—è–≤–∫—É\n\n' + tk
            mark = ''
            sendtoall(mes, mark, message.chat.id)
            bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
            bot.send_message(
                message.chat.id,
                '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–Ω–µ–Ω–µ–Ω–∞.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            continue_polling = True
        elif message.text == '‚õîÔ∏è –ù–µ—Ç':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        else:
            bot.send_message(
                message.chat.id,
                '–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –Ω–æ–≤—ã–π',
                reply_markup=buttons.Buttons(['‚úÖ –î–∞','‚õîÔ∏è –ù–µ—Ç'])
            )
            bot.register_next_step_handler(message, Task.task7_2)
# —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É
def filters(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    messagetouser = '–ü–æ –∫–∞–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫\n'
    if ActiveUser[message.chat.id]['filter']['from'] == '01.01.2000 00:00':
        messagetouser = messagetouser + 'üìÖ –ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∑–∞—è–≤–∫–∏ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥.\n'
    else:
        messagetouser = messagetouser + 'üìÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥:\n c' + str(ActiveUser[message.chat.id]['filter']['from']) + ' –ø–æ ' + str(ActiveUser[message.chat.id]['filter']['to']) + '\n'
    messagetouser = messagetouser + '\nüìç –°–¢–ê–¢–£–°:\n'
    if ActiveUser[message.chat.id]['filter']['added'] == 1:
        messagetouser = messagetouser + 'üîµ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n'
    if ActiveUser[message.chat.id]['filter']['confirmed'] == 1:
        messagetouser = messagetouser + 'üü° –í —Ä–∞–±–æ—Ç–µ\n'
    if ActiveUser[message.chat.id]['filter']['done'] == 1:
        messagetouser = messagetouser + 'üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ\n'
    if ActiveUser[message.chat.id]['filter']['canceled'] == 1:
        messagetouser = messagetouser + 'üî¥ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ'
    if ActiveUser[message.chat.id]['filter']['justmy'] == 1:
        messagetouser = messagetouser + '\nüë§ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –∑–∞—è–≤–∫–∏.'
    return messagetouser
# –æ–±—â–∏–π —á–∞—Ç (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
class allchats:
    # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º
    def chat1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - {message.text}')
        if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '/start':
            logging.info('main')
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, MainMenu.Main2)
        else:
            logging.info('message to all')
            users = db.select_table('Users')
            for user in users:
                try:
                    logging.info(f'sended message to user {user[2]} {user[1]}')
                    if user[0] != message.chat.id:
                        bot.forward_message(user[0], message.chat.id, message.message_id)
                except Exception as e:
                    logging.error(e)
                    pass
            # for user in users:
            #     try:
            #         pinm = bot.forward_message(user[0], message.chat.id, message.message_id)
            #         if message.from_user.id == 65241621 or message.from_user.id == 1669785252:
            #             bot.unpin_chat_message(user[0])
            #             bot.pin_chat_message(user[0], pinm.message_id)
            #         logging.info(f'sent message to user {user[3]} from {user[2]}')
            #     except Exception as e:
            #         logging.error(e)
            #         pass
            bot.register_next_step_handler(message, allchats.chat1)
# –æ—Ç—á–µ—Ç—ã
class report:
    # –ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    def rep(message, daterep, dr = 1, conf = 0, added = 0, done = 0, canc = 0, master = 0, my = 0, tadded = 0, tconf = 0, tdone = 0):
        donetasks = []
        confirmedtasks = []
        addedtasks = []
        canceledtasks = []
        if tdone == 1:
            if my == 1:
                filt = {'status': 7, 'master': master}
            else:
                filt = {'status': 7}
            logging.info(f'–ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É —É –º–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞ {daterep}')
            tdonetasks = functions.listgen(db.select_table_with_filters('Tasks', filt, ['done'], [daterep+' 00:00'], [daterep+' 23:59']), [0, 1, 3, 4, 6], 1)
            if len(tdonetasks) != 0:
                bot.send_message(
                    message.chat.id,
                    'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–ì–æ—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞.',
                    reply_markup=''
                )
                for line in tdonetasks:
                    taskid = line.split()[2]
                    bot.send_message(
                        message.chat.id,
                        line,
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
        if tconf == 1:
            if my == 1:
                filt = {'status': 6, 'master': master}
            else:
                filt = {'status': 6}
            logging.info(f'–ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É —É –º–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞ {daterep}')
            tconftasks = functions.listgen(db.select_table_with_filters('Tasks', filt), [0, 1, 3, 4, 6], 1)
            if len(tconftasks) != 0:
                bot.send_message(
                    message.chat.id,
                    'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–¢–µ—Ö–Ω–∏–∫–∞ —É –º–∞—Å—Ç–µ—Ä–æ–≤.',
                    reply_markup=''
                )
                for line in tconftasks:
                    taskid = line.split()[2]
                    bot.send_message(
                        message.chat.id,
                        line,
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
        if tadded == 1:
            logging.info(f'–ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –Ω–∞ –ø—Ä–∏–Ω—è—Ç—É—é —Ç–µ—Ö–Ω–∏–∫—É.')
            taddedtasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 5}), [0, 1, 3, 4, 6], 1)
            if len(taddedtasks) != 0:
                bot.send_message(
                    message.chat.id,
                    'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–û–∂–∏–¥–∞–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞',
                    reply_markup=''
                )
                for line in taddedtasks:
                    taskid = line.split()[2]
                    bot.send_message(
                        message.chat.id,
                        line,
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
        if done == 1:
            if my == 1:
                filt = {'status': 3, 'master': master}
            else:
                filt = {'status': 3}
            logging.info(f'–ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ {daterep}')
            donetasks = functions.listgen(db.select_table_with_filters('Tasks', filt, ['done'], [daterep+' 00:00'], [daterep+' 23:59']), [0, 1, 3, 4, 6], 1)
            if len(donetasks) != 0:
                bot.send_message(
                    message.chat.id,
                    'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏',
                    reply_markup=''
                )
                for line in donetasks:
                    taskid = line.split()[2]
                    bot.send_message(
                        message.chat.id,
                        line,
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
        if conf == 1:
            logging.info(f'–ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –Ω–∞ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ {daterep}')
            if master == 0:
                filt = {'status': 2}
            else:
                filt = {'status': 2, 'master': master}
            confirmedtasks = functions.listgen(db.select_table_with_filters('Tasks', filt), [0, 1, 3, 4, 6], 1)
            if master != 0 and len(confirmedtasks) == 0:
                bot.send_message(
                    message.chat.id,
                    '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ.',
                    reply_markup=''
                )
            if len(confirmedtasks) != 0:
                bot.send_message(
                    message.chat.id,
                    'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–ó–∞—è–≤–∫–∏ —É –º–∞—Å—Ç–µ—Ä–æ–≤',
                    reply_markup=''
                )
                for line in confirmedtasks:
                    taskid = line.split()[2]
                    bot.send_message(
                        message.chat.id,
                        line,
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
        if added == 1:
            logging.info(f'–ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ {daterep}')
            addedtasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 1}), [0, 1, 3, 4, 6], 1)
            if len(addedtasks) != 0:
                bot.send_message(
                    message.chat.id,
                    'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–ù–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏',
                    reply_markup=''
                )
                for line in addedtasks:
                    taskid = line.split()[2]
                    bot.send_message(
                        message.chat.id,
                        line,
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
        if canc == 1:
            logging.info(f'–ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ {daterep}')
            canceledtasks = functions.listgen(db.select_table_with_filters('Tasks', {'status': 4}, ['canceled'], [daterep+' 00:00'], [daterep+' 23:59']), [0, 1, 3, 4, 6], 1)
            if len(canceledtasks) != 0:
                bot.send_message(
                    message.chat.id,
                    'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ',
                    reply_markup=''
                )
                for line in canceledtasks:
                    taskid = line.split()[2]
                    bot.send_message(
                        message.chat.id,
                        line,
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
        if dr == 1:
            reports = '\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ - ' + str(len(donetasks)) + '\n–ù–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö - ' + str(len(addedtasks)) + '\n–í —Ä–∞–±–æ—Ç–µ —É –º–∞—Å—Ç–µ—Ä–æ–≤ - ' + str(len(confirmedtasks)) + '\n–û—Ç–º–µ–Ω–µ–Ω–æ - ' + str(len(canceledtasks))
            reports = reports + '\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞–º–∏:\n\n'
            users = db.select_table('Users')
            usersrep = []
            print(daterep)
            for i in users:
                tasks = len(db.select_table_with_filters('Tasks', {'master': i[0], 'status': 3}, ['done'], [str(daterep)+' 00:00'], [str(daterep)+' 23:59']))
                usersrep.append([i[2] + ' ' + i[1], tasks])
            sorted_usersrep = sorted(usersrep, key=lambda x: x[1], reverse=True)
            for j in sorted_usersrep:
                if j[1] != 0:
                    reports = reports + '\n' + j[0] + ' - ' + str(j[1])
            bot.send_message(
                message.chat.id,
                '–ò–¢–û–ì–ò –î–ù–Ø\nüî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫üî∫' + reports,
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
        else:
            if len(addedtasks) != 0 and len(confirmedtasks) != 0 and len(donetasks) != 0 and len(canceledtasks) != 0:
                bot.send_message(
                    message.chat.id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.register_next_step_handler(message, MainMenu.Main2)
    # –†–µ–∞–∫–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
    def reportall(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == 'üìã –ó–∞—è–≤–∫–∏ —É –º–∞—Å—Ç–µ—Ä–æ–≤':
            logging.info('–ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
            users = db.select_table('Users')
            res = ''
            bot.send_message(
                message.chat.id,
                '–ó–ê–Ø–í–ö–ò –£ –ú–ê–°–¢–ï–†–û–í\n\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª',
                reply_markup=buttons.clearbuttons()
            )
            processing = bot.send_message(message.chat.id, '‚è≥')
            tc = 0
            for u in users:
                userid = u[0]
                daterep = str(datetime.now().strftime("%d.%m.%Y"))
                confirmed = db.select_table_with_filters('Tasks', {'status': 2, 'master': userid})
                done = db.select_table_with_filters('Tasks', {'status': 3, 'master': userid}, ['done'], [daterep+' 00:00'], [daterep+' 23:59'])
                canceled = db.select_table_with_filters('Tasks', {'status': 4, 'master': userid}, ['canceled'], [daterep+' 00:00'], [daterep+' 23:59'])
                if len(confirmed) > 0 or len(done) > 0 or len(canceled) > 0:
                    res = res + f'\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\nüë§ {u[2]} {u[1]}\n\n–ó–ê–Ø–í–ö–ò –í –†–ê–ë–û–¢–ï:\n'
                    if len(confirmed) > 0:
                        for i in confirmed:
                            contr = db.get_record_by_id('Contragents', i[3])[1]
                            adr = db.get_record_by_id('Contragents', i[3])[2]
                            res = res + f'\nüü° - ‚Ññ{i[0]} –æ—Ç {i[1]} | {contr}\n{adr}'
                    if len(done) > 0:
                        for j in done:
                            contr = db.get_record_by_id('Contragents', j[3])[1]
                            adr = db.get_record_by_id('Contragents', j[3])[2]
                            res = res + f'\nüü¢ - ‚Ññ{j[0]} –æ—Ç {j[1]} | {contr}\n{adr}'
                    if len(canceled) > 0:
                        for k in canceled:
                            contr = db.get_record_by_id('Contragents', k[3])[1]
                            adr = db.get_record_by_id('Contragents', k[3])[2]
                            res = res + f'\nüî¥ - ‚Ññ{k[0]} –æ—Ç {k[1]} | {contr}\n{adr}'
                    bot.send_message(
                        message.chat.id,
                        res,
                        reply_markup=buttons.clearbuttons()
                    )
                    res = ''
                    tc = tc + 1
            bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
            if tc == 0:
                bot.send_message(
                    message.chat.id,
                    '–£ –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
            else:
                bot.send_message(
                    message.chat.id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == 'üñ®Ô∏è –¢–µ—Ö–Ω–∏–∫–∞ —É –º–∞—Å—Ç–µ—Ä–æ–≤':
            logging.info('–ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
            users = db.select_table('Users')
            res = ''
            bot.send_message(
                message.chat.id,
                '–¢–ï–•–ù–ò–ö–ê –í –†–ê–ë–û–¢–ï\n\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª',
                reply_markup=buttons.clearbuttons()
            )
            processing = bot.send_message(message.chat.id, '‚è≥')
            tc = 0
            for u in users:
                userid = u[0]
                daterep = str(datetime.now().strftime("%d.%m.%Y"))
                confirmed = db.select_table_with_filters('Tasks', {'status': 6, 'master': userid})
                done = db.select_table_with_filters('Tasks', {'status': 7, 'master': userid}, ['done'], [daterep+' 00:00'], [daterep+' 23:59'])
                if len(confirmed) > 0 or len(done) > 0:
                    res = res + f'\nüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\nüë§ {u[2]} {u[1]}\n\n–¢–ï–•–ù–ò–ö–ê –ù–ê –†–ï–ú–û–ù–¢–ï:\n'
                    if len(confirmed) > 0:
                        for i in confirmed:
                            tech = i[4].split('\n======================\n')[0] + '\n' + i[4].split('\n======================\n')[1]
                            res = res + f'\nüü® - ‚Ññ{i[0]} –æ—Ç {i[1]}\n{tech}'
                    if len(done) > 0:
                        for j in done:
                            tech = j[4].split('\n======================\n')[0] + '\n' + j[4].split('\n======================\n')[1]
                            res = res + f'\nüü© - ‚Ññ{j[0]} –æ—Ç {j[1]}\n{tech}'
                    bot.send_message(
                        message.chat.id,
                        res,
                        reply_markup=buttons.clearbuttons()
                    )
                    res = ''
                tc = tc + 1
            bot.delete_message(chat_id=message.chat.id, message_id=processing.message_id)
            if tc == 0:
                bot.send_message(
                    message.chat.id,
                    '–£ –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
            else:
                bot.send_message(
                    message.chat.id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == 'üìä –ò—Ç–æ–≥–∏ –¥–Ω—è':
            bot.send_message(
                message.chat.id,
                '–ö–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?',
                reply_markup = buttons.Buttons(['üåû –°–µ–≥–æ–¥–Ω—è', 'üóìÔ∏è –î—Ä—É–≥–æ–π –¥–µ–Ω—å'])
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, report.reportall1)
        elif message.text == 'üìÜ –ó–∞ –ø–µ—Ä–∏–æ–¥':
            bot.send_message(
                message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü–†–ò–ú–ï–†: 01.01.2023 –∏–ª–∏ 01,01,2023',
                reply_markup = buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, report.period1)
        elif message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –æ—Ç—á–µ—Ç –í–∞–º –Ω—É–∂–µ–Ω.',
                reply_markup=buttons.Buttons(['üìã –ó–∞—è–≤–∫–∏ —É –º–∞—Å—Ç–µ—Ä–æ–≤', 'üñ®Ô∏è –¢–µ—Ö–Ω–∏–∫–∞ —É –º–∞—Å—Ç–µ—Ä–æ–≤', 'üìä –ò—Ç–æ–≥–∏ –¥–Ω—è', 'üö´ –û—Ç–º–µ–Ω–∞'])
            )
            bot.register_next_step_handler(message, report.reportall)
    # period
    def period1(message):# —Å
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        m1 = message.text
        m1 = m1.replace(' ', '.')
        m1 = m1.replace(',', '.')
        m = m1.split('.')
        if len(m[0]) == 2 and len(m[1]) == 2 and len(m[2]) == 4 and len(m) == 3:
            ActiveUser[message.chat.id]['daterepf'] = m1
            bot.send_message(
                message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü–†–ò–ú–ï–†: 01.01.2023 –∏–ª–∏ 01,01,2023',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, report.period2)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã...\n–£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü–†–ò–ú–ï–†: 01.01.2023 –∏–ª–∏ 01,01,2023',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, report.period1)
    def period2(message):# –ø–æ
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        m1 = message.text
        m1 = m1.replace(' ', '.')
        m1 = m1.replace(',', '.')
        m = m1.split('.')
        if len(m[0]) == 2 and len(m[1]) == 2 and len(m[2]) == 4 and len(m) == 3:
            ActiveUser[message.chat.id]['daterept'] = m1
            fr = ActiveUser[message.chat.id]['daterepf']
            t = ActiveUser[message.chat.id]['daterept']
            bot.send_message(
                message.chat.id,
                f'–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ —Å {fr} –ø–æ {t}\n–ö–∞–∫–æ–π –æ—Ç—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏?',
                reply_markup=buttons.Buttons(['–í—Å–µ –∑–∞—è–≤–∫–∏','–ø–æ –º–∞—Å—Ç–µ—Ä–∞–º','–ø–æ –∫–ª–∏–µ–Ω—Ç—É'])
            )
            bot.register_next_step_handler(message, report.period3)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã...\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü–†–ò–ú–ï–†: 01.01.2023 –∏–ª–∏ 01,01,2023',
                reply_markup=buttons.clearbuttons()
            )
            bot.register_next_step_handler(message, report.period2)
    def period3(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == '–í—Å–µ –∑–∞—è–≤–∫–∏':
            fr = ActiveUser[message.chat.id]['daterepf']
            t = ActiveUser[message.chat.id]['daterept']
            rept = db.select_table_with_filters('Tasks', {'status': 3}, ['done'], [fr+' 00:00'], [t+' 23:59'])
            sendrepfile(message, rept)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == '–ø–æ –º–∞—Å—Ç–µ—Ä–∞–º':
            users = db.select_table('Users')
            btn = []
            for user in users:
                line = str(user[0]) + ' ' + str(user[2]) + ' ' + str(user[1])
                btn.append(line)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞.',
                reply_markup=buttons.Buttons(btn,1)
            )
            bot.register_next_step_handler(message, report.period4)
        elif message.text == '–ø–æ –∫–ª–∏–µ–Ω—Ç—É':
            bot.send_message(
                message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù, –ü–ò–ù–§–õ –∏–ª–∏ —Å–µ—Ä–∏—é –ø–≤—Å—Å–ø–æ—Ä—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.\n–¢–∞–∫ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç–∏\n–ù–∞–ø—Ä–∏–º–∞—Ä:\nmonohrom\n–í—ã–¥–∞—Å—Ç –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞ —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å monohrom',
                reply_markup=buttons.Buttons(['üö´ –û—Ç–º–µ–Ω–∞'])
            )
            bot.register_next_step_handler(message, report.period5)

    def period4(message): # –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        uid = message.text.split()[0]
        selecteduser = db.get_record_by_id('Users', uid)
        if uid.isdigit() and selecteduser != None:
            fr = ActiveUser[message.chat.id]['daterepf']
            t = ActiveUser[message.chat.id]['daterept']
            rept = db.select_table_with_filters('Tasks', {'master': selecteduser[0], 'status': 3}, ['done'], [fr+' 00:00'], [t+' 23:59'])
            sendrepfile(message, rept)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        else:
            users = db.select_table('Users')
            btn = []
            for user in users:
                line = str(user[0]) + ' ' + str(user[2]) + ' ' + str(user[1])
                btn.append(line)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞.',
                reply_markup=buttons.Buttons(btn,1)
            )
            bot.register_next_step_handler(message, report.period4)
    def period5(message): # –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        global ActiveUser
        if message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text.split()[0].isdigit():
            inn = int(message.text.split()[0])
            client = db.get_record_by_id('Contragents', inn)
            if client[5] is not None:
                fr = ActiveUser[message.chat.id]['daterepf']
                t = ActiveUser[message.chat.id]['daterept']
                rept = db.select_table_with_filters('Tasks', {'contragent': inn, 'status': 3}, ['done'], [fr+' 00:00'], [t+' 23:59'])
                sendrepfile(message, rept)
                bot.send_message(
                    message.chat.id,
                    '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                    reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
                )
                bot.register_next_step_handler(message, MainMenu.Main2)
            else:
                bot.send_message(
                    message.chat.id,
                    '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                    reply_markup=buttons.Buttons(['üö´ –û—Ç–º–µ–Ω–∞'])
                )
                bot.register_next_step_handler(message, report.period5)
        else:
            contrs = db.select_table('Contragents')
            res = functions.search_items(message.text, contrs)
            contbuttons = []
            contbuttons.append('üö´ –û—Ç–º–µ–Ω–∞')
            if len(res) > 0:
                for i in res:
                    line = str(i[0]) + ' ' + str(i[1])
                    if len(contbuttons) < 20:
                        contbuttons.append(line)
                try:
                    bot.send_message(
                        message.chat.id,
                        '–ï—Å–ª–∏ –Ω—É–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã—à–µ–ª –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ò–ù–ù, –ü–ò–ù–§–õ, —Å–µ—Ä–∏—é –ø–∞—Å—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.',
                        reply_markup=buttons.Buttons(contbuttons, 1)
                    )
                except Exception as e:
                    logging.error(e)
                    pass
            else:
                bot.send_message(
                    message.chat.id,
                    '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                    reply_markup=buttons.Buttons(contbuttons, 1)
                )
            bot.register_next_step_handler(message, report.period5)

    # –ò—Ç–æ–≥–∏ –¥–Ω—è
    def reportall1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == 'üåû –°–µ–≥–æ–¥–Ω—è':
            logging.info(f'–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {message.chat.id}')
            daterep = str(datetime.now().strftime("%d.%m.%Y"))
            report.rep(message, daterep, 1, 1, 1, 1, 1)
        elif message.text == 'üóìÔ∏è –î—Ä—É–≥–æ–π –¥–µ–Ω—å':
            bot.send_message(
                message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü–†–ò–ú–ï–†: 01.01.2023 –∏–ª–∏ 01,01,2023',
                reply_markup = buttons.clearbuttons()
            )
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot.register_next_step_handler(message, report.reportallq)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                reply_markup = buttons.Buttons(['üåû –°–µ–≥–æ–¥–Ω—è', 'üóìÔ∏è –î—Ä—É–≥–æ–π –¥–µ–Ω—å'])
            )
            bot.register_next_step_handler(message, report.reportall1)
    def reportallq(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        ActiveUser[message.chat.id]['repotherdate'] = message.text
        bot.send_message(
            message.chat.id,
            '–ö–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å?',
            reply_markup=buttons.Buttons(['–í—Å–µ', '–¢–æ–ª—å–∫–æ –º–æ–∏', '–£ –º–∞—Å—Ç–µ—Ä–∞'])
        )
        bot.register_next_step_handler(message, report.reportall2)
    def reportall2(message):
        global ActiveUser
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        m1 = ActiveUser[message.chat.id]['repotherdate']
        m1 = m1.replace(' ', '.')
        m1 = m1.replace(',', '.')
        m = m1.split('.')
        if len(m[0]) == 2 and len(m[1]) == 2 and len(m[2]) == 4 and len(m) == 3:
            ActiveUser[message.chat.id]['daterep'] = m1
        daterep = str(ActiveUser[message.chat.id]['daterep'])
        print(daterep)
        if message.text.split()[0].isdigit():
            print('master')
            masterid = int(message.text.split()[0])
            mastername = str(db.get_record_by_id('Users', masterid)[2]) + ' ' + str(db.get_record_by_id('Users', masterid)[1])
            bot.send_message(
                message.chat.id,
                f'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–û—Ç—á–µ—Ç –∑–∞: {daterep}\n–ú–∞—Å—Ç–µ—Ä: {mastername}',
                reply_markup=buttons.clearbuttons()
            )
            rept = db.select_table_with_filters('Tasks', {'master': masterid, 'status': 3}, ['done'], [daterep+' 00:00'], [daterep+' 23:59'])
            sendrep(message, rept)
            sendrepfile(message, rept)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == '–í—Å–µ':
            bot.send_message(
                message.chat.id,
                f'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–û—Ç—á–µ—Ç –∑–∞: {daterep}\n–ú–∞—Å—Ç–µ—Ä: –í—Å–µ',
                reply_markup=buttons.clearbuttons()
            )
            rept = db.select_table_with_filters('Tasks', {'status': 3}, ['done'], [daterep+' 00:00'], [daterep+' 23:59'])
            sendrep(message, rept)
            sendrepfile(message, rept)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == '–¢–æ–ª—å–∫–æ –º–æ–∏':
            bot.send_message(
                message.chat.id,
                f'üîªüîªüîªüîªüîªüîªüîªüîªüîªüîª\n–û—Ç—á–µ—Ç –∑–∞: {daterep}\n–ú–∞—Å—Ç–µ—Ä: –Ø',
                reply_markup=buttons.clearbuttons()
            )
            rept = db.select_table_with_filters('Tasks', {'master': message.chat.id, 'status': 3}, ['done'], [daterep+' 00:00'], [daterep+' 23:59'])
            sendrep(message, rept)
            sendrepfile(message, rept)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == '–£ –º–∞—Å—Ç–µ—Ä–∞':
            users = db.select_table('Users')
            masters = []
            masters.append('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            for user in users:
                line = str(user[0]) + ' ' + str(user[2]) + ' ' + str(user[1])
                masters.append(line)
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞.',
                reply_markup=buttons.Buttons(masters, 1)
            )
            bot.register_next_step_handler(message, report.reportall2)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n–ö–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å?',
                reply_markup=buttons.Buttons(['–í—Å–µ', '–¢–æ–ª—å–∫–æ –º–æ–∏', '–£ –º–∞—Å—Ç–µ—Ä–∞'])
            )
            bot.register_next_step_handler(message, report.reportall2)

@bot.message_handler(content_types=['text', 'location'])
# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—É–≥–ª —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏
def CADR1(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    if message.content_type == 'location':
        lon, lat = message.location.longitude, message.location.latitude
        url = f'GOOGLE: https://www.google.com/maps/search/?api=1&query={lat},{lon}'
        ActiveUser[message.chat.id]['contnew'][2] = url
    else:
        ActiveUser[message.chat.id]['contnew'][2] = message.text
    editcontragent(message)
    bot.register_next_step_handler(message, editcont.ec2)
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—É–≥–ª —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
def NeContr4(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    if message.content_type == 'location':
        lon, lat = message.location.longitude, message.location.latitude
        url = f'GOOGLE: https://www.google.com/maps/search/?api=1&query={lat},{lon}\nAPPLE: http://maps.apple.com/maps?ll={lat},{lon}'
        ActiveUser[message.chat.id]['cadr'] = url
    else:
        ActiveUser[message.chat.id]['cadr'] = message.text
    bot.send_message(
        message.chat.id,
        '–ö—Ç–æ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É? –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞.',
        reply_markup=buttons.clearbuttons()
    )
    bot.register_next_step_handler(message, NeContr5)
def NeContr5(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    if ActiveUser[message.chat.id]['ds'] == 3:
        if message.content_type == 'location':
            lon, lat = message.location.longitude, message.location.latitude
            url = f'GOOGLE: https://www.google.com/maps/search/?api=1&query={lat},{lon}\nAPPLE: http://maps.apple.com/maps?ll={lat},{lon}'
            ActiveUser[message.chat.id]['cadr'] = url
        else:
            ActiveUser[message.chat.id]['cadr'] = message.text
    else:
        ActiveUser[message.chat.id]['cperson'] = message.text
    bot.send_message(
        message.chat.id,
        '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.',
        reply_markup=buttons.clearbuttons()
    )
    bot.register_next_step_handler(message, NewTask.NeContr6)
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
def newlocation(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    if message.content_type == 'location':
        ActiveUser[message.chat.id]['lon'], ActiveUser[message.chat.id]['lat'] = message.location.longitude, message.location.latitude
        bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏\n–ù–ê–ü–†–ò–ú–ï–†:\n–§–∏–ª–∏–∞–ª —á–∏–ª–∞–Ω–∑–∞—Ä –∏–ª–∏ –≥–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å',
            reply_markup=buttons.clearbuttons()
        )
        bot.register_next_step_handler(message, newlocation1)
    else:
        bot.send_message(
            message.chat.id,
            '–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.',
            reply_markup=buttons.clearbuttons
        )
        bot.register_next_step_handler(message, newlocation)
def newlocation1(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    ActiveUser[message.chat.id]['locationname'] = message.text
    db.insert_record(
        'Locations',
        [
            None,
            ActiveUser[message.chat.id]['inn'],
            ActiveUser[message.chat.id]['locationname'],
            ActiveUser[message.chat.id]['lat'],
            ActiveUser[message.chat.id]['lon']
        ]
    )
    bot.send_message(
        message.chat.id,
        '–õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.',
        reply_markup=buttons.clearbuttons()
    )
    locations = db.select_table_with_filters('Locations', {'inn': ActiveUser[message.chat.id]['inn']})
    buttonsloc = []
    buttonsloc.append('üÜï –î–æ–±–∞–≤–∏—Ç—å')
    try:
        for location in locations:
            buttonsloc.append(str(location[0]) + ' ' + str(location[2]))
    except Exception as e:
        logging.error(e)
        time.sleep(5)
    buttonsloc.append('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    if len(locations) > 2:
        bot.send_message(
            message.chat.id,
            '–≠—Ç–æ –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.',
            reply_markup=buttons.Buttons(buttonsloc, 2)
        )
    else:
        bot.send_message(
            message.chat.id,
            '–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ª–æ–∫–∞—Ü–∏–∏.',
            reply_markup=buttons.Buttons(buttonsloc, 2)
        )
    bot.register_next_step_handler(message, editcont.locations1)
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–∏–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
def editcontlocation1(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    if message.content_type == 'location':
        lon, lat = message.location.longitude, message.location.latitude
        db.update_records(
            'Locations',
            [
                'lon',
                'lat'
            ],
            [
                lon,
                lat
            ],
            'id',
            ActiveUser[message.chat.id]['curlocation']
        )
        bot.send_message(
            message.chat.id,
            '–õ–æ–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
            reply_markup=buttons.Buttons(['–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'üö´ –û—Ç–º–µ–Ω–∞'], 3)
        )
        bot.register_next_step_handler(message, editcont.locations2)
    else:
        bot.send_message(
            message.chat.id,
            '–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.',
            reply_markup=buttons.clearbuttons
        )
        bot.register_next_step_handler(message, newlocation)
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Ñ–∏–ª–∏–∞–ª–∞ –≤ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
def newlocationintask1(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    if message.content_type == 'location':
        ActiveUser[message.chat.id]['lon'], ActiveUser[message.chat.id]['lat'] = message.location.longitude, message.location.latitude
        bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏\n–ù–ê–ü–†–ò–ú–ï–†:\n–§–∏–ª–∏–∞–ª —á–∏–ª–∞–Ω–∑–∞—Ä –∏–ª–∏ –≥–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å',
            reply_markup=buttons.clearbuttons()
        )
        bot.register_next_step_handler(message, newlocationintask2)
    else:
        bot.send_message(
            message.chat.id,
            '–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.',
            reply_markup=buttons.clearbuttons
        )
        bot.register_next_step_handler(message, newlocationintask1)
def newlocationintask2(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    ActiveUser[message.chat.id]['locationname'] = message.text
    db.insert_record(
        'Locations',
        [
            None,
            ActiveUser[message.chat.id]['inn'],
            ActiveUser[message.chat.id]['locationname'],
            ActiveUser[message.chat.id]['lat'],
            ActiveUser[message.chat.id]['lon']
        ]
    )
    locations = db.select_table_with_filters('Locations', {'inn': ActiveUser[message.chat.id]['inn']})
    clocations = ['‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
    if len(locations) > 0:
        for i in locations:
            line = str(i[0]) + ' ' + str(i[2])
            clocations.append(line)
        clocations.append('üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª')
        bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª',
            reply_markup=buttons.Buttons(clocations)
        )
    bot.register_next_step_handler(message, NewTask.ntlocation2)
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Ñ–∏–ª–∏–∞–ª–∞ –≤ –∞–∫–Ω–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–µ
def tnl1(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    if message.content_type == 'location':
        lon, lat = message.location.longitude, message.location.latitude
        ActiveUser[message.chat.id]['lon'] = lon
        ActiveUser[message.chat.id]['lat'] = lat
        bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏\n–ù–ê–ü–†–ò–ú–ï–†:\n–§–∏–ª–∏–∞–ª —á–∏–ª–∞–Ω–∑–∞—Ä –∏–ª–∏ –≥–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å',
        )
        bot.register_next_step_handler(message, tnl2)
    else:
        bot.send_message(
            message.chat.id,
            '–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.',
            reply_markup=buttons.clearbuttons
        )
        bot.register_next_step_handler(message, tnl1)
def tnl2(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    global ActiveUser
    ActiveUser[message.chat.id]['locationname'] = message.text
    ActiveUser[message.chat.id]['inn'] = db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[3]
    db.insert_record(
        'Locations',
        [
            None,
            ActiveUser[message.chat.id]['inn'],
            ActiveUser[message.chat.id]['locationname'],
            ActiveUser[message.chat.id]['lat'],
            ActiveUser[message.chat.id]['lon']
        ]
    )
    inn = db.get_record_by_id('Tasks', ActiveUser[message.chat.id]['task'])[3]
    locations = db.select_table_with_filters('Locations', {'inn': inn})
    buttonsloc = []
    buttonsloc.append('üÜï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª')
    if len(locations) > 0:
        for location in locations:
            buttonsloc.append(str(location[0]) + ' ' + str(location[2]))
    buttonsloc.append('üö´ –û—Ç–º–µ–Ω–∞')
    if len(locations) > 0:
        bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª...',
            reply_markup=buttons.Buttons(buttonsloc, 2)
        )
    bot.register_next_step_handler(message, Task.locations2)


@bot.callback_query_handler(func=lambda call: True)
# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
def callback_handler(call):
    global ActiveUser, sendedmessages, continue_polling
    continue_polling = False
    if call.data.split()[0] == 'tasklist':# –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏
        status = db.get_record_by_id('Tasks', int(call.data.split()[1]))
        if status[11] == 1 or status[11] == 5:
            markdownt = buttons.Buttons(['üëç –ü—Ä–∏–Ω—è—Ç—å', 'üñäÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å', 'üìé –ù–∞–∑–Ω–∞—á–∏—Ç—å', 'ü§µ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏', 'üìç –õ–æ–∫–∞—Ü–∏—è', 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', '‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
        elif status[11] == 2 or status[11] == 6:
            markdownt = buttons.Buttons(['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'üñäÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å', 'üôÖ‚Äç‚ôÇÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏', 'üìé –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å', 'ü§µ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏', 'üìç –õ–æ–∫–∞—Ü–∏—è', 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', '‚Ü©Ô∏è –ù–∞–∑–∞–¥'], 3)
        else:
            markdownt = buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏', 'üìç –õ–æ–∫–∞—Ü–∏—è', 'üìà –û—Ç—á–µ—Ç—ã', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
        ActiveUser[call.from_user.id]['sentmes'] = bot.send_message(
            call.from_user.id,
            functions.curtask(call.data.split()[1]),
            reply_markup=markdownt
        )
        ActiveUser[call.from_user.id]['task'] = call.data.split()[1]
        bot.register_next_step_handler(call.message, Task.task1)
    elif call.data.split()[0] == 'confirm':# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏
        if db.get_record_by_id('Tasks', call.data.split()[1])[11] == 5:
            stat = 6
        else:
            stat = 2
        if db.get_record_by_id('Tasks', call.data.split()[1])[11] != 1:
            bot.send_message(
                call.from_user.id,
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É! –µ–µ —É–∂–µ –ø—Ä–∏–Ω—è–ª " + db.get_record_by_id('Users', db.get_record_by_id('Tasks', ActiveUser[call.from_user.id]['task'])[6])[2] + ' ' + db.get_record_by_id('Users', db.get_record_by_id('Tasks', ActiveUser[call.from_user.id]['task'])[6])[1]
            )
        else:
            db.update_records(
                'Tasks',
                [
                    'confirmed',
                    'master',
                    'status'
                ], [
                    datetime.now().strftime("%d.%m.%Y %H:%M"),
                    call.from_user.id,
                    stat
                ],
                'id',
                call.data.split()[1]
            )
            bot.send_message(
                call.from_user.id,
                "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É..."
            )
            sendtoall(str(db.get_record_by_id('Users', call.from_user.id)[2]) + ' ' + str(db.get_record_by_id('Users', call.from_user.id)[1]) + '\n–ü—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É:\n\n' + functions.curtask(call.data.split()[1]), '', call.from_user.id)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            continue_polling = True
            # bot.register_next_step_handler(call.message, MainMenu.Main2)
            for line in sendedmessages:
                bot.delete_message(line[0], line[1])
    elif call.data.split()[0] == 'set':# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
        users = db.select_table('Users')
        bot.send_message(
            call.from_user.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞...',
            reply_markup=buttons.Buttons(functions.listgen(users, [0, 1, 2], 3), 1)
        )
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        ActiveUser[call.from_user.id]['task'] = call.data.split()[1]
        bot.register_next_step_handler(call.message, Task.task4)
        
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    sendtoall('‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è–°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω...‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "/start"', buttons.Buttons(['/start']), 0, 0, True)
    thread = threading.Thread(target=asyncio.run, args=(main(),))
    thread.start()
    if continue_polling is True:
        # bot.polling(none_stop=True, interval=0)
        while True:
            try:
                bot.polling(none_stop=True, interval=0)
                logging.info('–∑–∞–ø—É—Å–∫ –ø—É–ª–∞')
                logging.info()
            except Exception as e:
                logging.error(e)
                time.sleep(5)