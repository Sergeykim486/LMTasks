import telebot, logging, time, datetime, asyncio, threading, Classes.functions as functions, Classes.buttons as buttons, Classes.schedule_operations as schedule
from Classes.Selected_task import Task
from datetime import datetime
from Classes.edit_contragent import editcont
from Classes.add_new_task import NewTask
from Classes.reports import report
from Classes.register_new_user import Reg
from Classes.config import ActiveUser, bot, sendedmessages, db
# –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

def MenuReactions(message):

    if ActiveUser[message.chat.id]['Pause_main_handler'] == False or ActiveUser[message.chat.id]['Finishedop'] == True:
        if ActiveUser[message.chat.id]['Pause_main_handler'] == True:
            ActiveUser[message.chat.id]['Pause_main_handler'] = False
            ActiveUser[message.chat.id]['Finishedop'] = False
        if message.text == 'üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞':
            ActiveUser[message.chat.id]['nt'] = 1
            ActiveUser[message.chat.id]['Pause_main_handler'] = True
            ActiveUser[message.chat.id]['Finishedop'] = False
            if ActiveUser[message.chat.id]['block_nt1'] == False:
                ActiveUser[message.chat.id]['block_nt1'] = True
                NewTask.nt1(message)
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫':
            daterep = str(datetime.now().strftime("%d.%m.%Y"))
            report.rep(message, daterep, 0, 1, 1, 0, 0)
            ActiveUser[message.chat.id]['block_main_menu'] = False
        elif message.text == 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏':
            daterep = str(datetime.now().strftime("%d.%m.%Y"))
            report.rep(message, daterep, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1)
            ActiveUser[message.chat.id]['block_main_menu'] = False
        elif message.text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏':
            daterep = str(datetime.now().strftime("%d.%m.%Y"))
            report.rep(message, daterep, 0, 1, 0, 1, 0, message.chat.id, 1)
            ActiveUser[message.chat.id]['block_main_menu'] = False
        elif message.text == 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º':
            bot.send_message(
                message.chat.id,
                '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º.\n—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ [–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é]',
                reply_markup=buttons.Buttons(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
            )
            bot.register_next_step_handler(message, allchats.chat1)
        elif message.text == 'üìà –û—Ç—á–µ—Ç—ã':
            ActiveUser[message.chat.id]['Pause_main_handler'] = True
            ActiveUser[message.chat.id]['Finishedop'] = False
            report.reportall(message)
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞':
            ActiveUser[message.chat.id]['Pause_main_handler'] = True
            ActiveUser[message.chat.id]['Finishedop'] = False
            bot.register_next_step_handler(message, MainMenu.Main2)
            editcont.ec1(message)
        elif message.text == 'üó∫Ô∏è –ö–∞—Ä—Ç–∞':
            markup = telebot.types.InlineKeyboardMarkup()
            button = telebot.types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', url='http://81.200.149.148/map.html')
            markup.add(button)
            bot.send_message(
                message.chat.id,
                '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—É—â–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–∞ –∫–∞—Ä—Ç–µ',
                reply_markup=markup
            )
            ActiveUser[message.chat.id]['block_main_menu'] = False
            bot.register_next_step_handler(message, MainMenu.Main2)
        elif message.text != None:
            if message.text.isdigit() or (len(message.text.split()) > 1 and message.text.split()[1].isdigit()):
                if message.text.isdigit():
                    taskid = message.text
                elif message.text.split()[1].isdigit():
                    taskid = message.text.split()[1]
                task = db.get_record_by_id('Tasks', taskid)
                tasks = functions.listgen([task], [0, 1, 3, 4, 6], 1)
                if task != None:
                    bot.send_message(
                        message.chat.id,
                        tasks[0],
                        reply_markup=buttons.buttonsinline([['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', 'tasklist '+taskid]])
                    )
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            ActiveUser[message.chat.id]['block_main_menu'] = False
            bot.register_next_step_handler(message, MainMenu.Main2)
    elif message.text == '/start':
        print('main menu')
        ActiveUser[message.chat.id]['Pause_main_handler'] = False
        bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
            reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
        )
        ActiveUser[message.chat.id]['block_main_menu'] = False
        bot.register_next_step_handler(message, MainMenu.Main2)
    else:
        ActiveUser[message.chat.id]['block_main_menu'] = False
        bot.register_next_step_handler(message, MainMenu.Main2)

# =====================================  –° –¢ –ê –† –¢   –ë –û –¢ –ê  =====================================

@bot.message_handler(commands=['start'])

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def handle_start(message):
    user_id = message.from_user.id
    try:
        username = db.get_record_by_id('Users', user_id)[2] + ' ' + db.get_record_by_id('Users', user_id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    except Exception as e:
        logging.error(e)
        pass
    ActiveUser[user_id] = {'id': user_id}
    ActiveUser[user_id]['Pause_main_handler'] = False
    ActiveUser[user_id]['Finishedop'] = False
    ActiveUser[user_id]['block_main_menu'] = False
    ActiveUser[user_id]['block_nt1'] = False
    user = db.get_record_by_id('Users', user_id)
    if user is None:
        bot.send_message(
            user_id,
            '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.',
            reply_markup=buttons.Buttons(['–æ–∫'])
        )
        bot.register_next_step_handler(message, handle_start)
        # bot.send_message(
        #     user_id,
        #     '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.',
        #     reply_markup=buttons.Buttons(['üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
        # )
        # ActiveUser[message.chat.id]['Pause_main_handler'] = True
        # ActiveUser[message.chat.id]['Finishedop'] = False
        # bot.register_next_step_handler(message, Reg.reg1)
    else:
        bot.send_message(
            user_id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
            reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
        )
        bot.register_next_step_handler(message, MainMenu.Main2)

# =====================================  –û –° –ù –û –í –ù –´ –ï   –• –ï –ù –î –õ –ï –† –´  =====================================

@bot.message_handler(func=lambda message: True)

def check_user_id(message):
    user_id = message.from_user.id
    try:
        username = db.get_record_by_id('Users', user_id)[2] + ' ' + db.get_record_by_id('Users', user_id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    except Exception as e:
        logging.error(e)
        pass
    ActiveUser[user_id]['Finishedop'] = True
    ActiveUser[user_id]['Pause_main_handler'] = False
    ActiveUser[user_id]['block_main_menu'] = False
    ActiveUser[user_id]['block_nt1'] = False
    user = db.get_record_by_id('Users', user_id)
    if user is None:
        bot.send_message(
            user_id,
            '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.',
            reply_markup=buttons.Buttons(['–æ–∫'])
        )
        bot.stop_polling()
    else:
        MenuReactions(message)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
class MainMenu:
    def Main1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
            ActiveUser[message.chat.id]['sentmes'] = bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            bot.register_next_step_handler(message, MainMenu.Main2)
    # –†–µ–∞–∫–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    def Main2(message):
        try:
            if ActiveUser[message.chat.id]['Pause_main_handler'] == False:
                username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
                logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
        except Exception as e:
            pass
        if ActiveUser[message.chat.id]['block_main_menu'] == False:
            ActiveUser[message.chat.id]['block_main_menu'] = True
            MenuReactions(message)

# —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É
def filters(message):
    username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
    logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å - {message.text}')
    messagetouser = '–ü–æ –∫–∞–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫\n'
    if ActiveUser[message.chat.id]['filter']['from'] == '01.01.2000 00:00':
        messagetouser = messagetouser + 'üìÖ –ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∑–∞—è–≤–∫–∏ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥.\n'
    else:
        messagetouser = messagetouser + 'üìÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥:\n c' + str(ActiveUser[message.chat.id]['filter']['from']) + ' –ø–æ ' + str(ActiveUser[message.chat.id]['filter']['to']) + '\n'
    messagetouser = messagetouser + '\nüìç –°–¢–ê–¢–£–°:\n'
    if ActiveUser[message.chat.id]['filter']['added'] == 1:
        messagetouser = messagetouser + 'üîµ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n'
    if ActiveUser[message.chat.id]['filter']['confirmed'] == 1:
        messagetouser = messagetouser + 'üü° –í —Ä–∞–±–æ—Ç–µ\n'
    if ActiveUser[message.chat.id]['filter']['done'] == 1:
        messagetouser = messagetouser + 'üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ\n'
    if ActiveUser[message.chat.id]['filter']['canceled'] == 1:
        messagetouser = messagetouser + 'üî¥ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ'
    if ActiveUser[message.chat.id]['filter']['justmy'] == 1:
        messagetouser = messagetouser + '\nüë§ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –∑–∞—è–≤–∫–∏.'
    return messagetouser

# –æ–±—â–∏–π —á–∞—Ç (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
class allchats:
    # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º
    def chat1(message):
        username = db.get_record_by_id('Users', message.chat.id)[2] + ' ' + db.get_record_by_id('Users', message.chat.id)[1]
        logging.info(f'{username} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - {message.text}')
        if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '/start':
            logging.info('main')
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            ActiveUser[message.chat.id]['block_main_menu'] = False
            functions.mesdel(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, MainMenu.Main2)
        else:
            logging.info('message to all')
            processing = bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEJL8dkedQ1ckrfN8fniwY7yUc-YNaW_AACIAAD9wLID1KiROfjtgxPLwQ", reply_markup=buttons.clearbuttons())
            users = db.select_table('Users')
            for user in users:
                try:
                    # logging.info(f'sended message to user {user[2]} {user[1]}')
                    if user[0] != message.chat.id:
                        bot.forward_message(user[0], message.chat.id, message.message_id)
                except Exception as e:
                    pass
            functions.mesdel(message.chat.id, processing.message_id)
            bot.register_next_step_handler(message, allchats.chat1)

# =====================================  –† –ï –ê –ö –¶ –ò –ò   –ù –ê   –ò –ù –õ –ê –ô –ù –û –í –´ –ï   –ö –ù –û –ü –ö –ò  =====================================

@bot.callback_query_handler(func=lambda call: True)
# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
def callback_handler(call):
    ActiveUser[call.from_user.id]['Pause_main_handler'] = True
    ActiveUser[call.from_user.id]['Finishedop'] = False
    if call.data.split()[0] == 'tasklist':# –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏
        status = db.get_record_by_id('Tasks', int(call.data.split()[1]))
        if status[11] == 1 or status[11] == 5:
            markdownt = buttons.Buttons(['üëç –ü—Ä–∏–Ω—è—Ç—å', 'üñäÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å', 'üìé –ù–∞–∑–Ω–∞—á–∏—Ç—å', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏', 'üìç –õ–æ–∫–∞—Ü–∏—è', 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', '‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
        elif status[11] == 2 or status[11] == 6:
            markdownt = buttons.Buttons(['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'üñäÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å', 'üôÖ‚Äç‚ôÇÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏', 'üìé –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏', 'üìç –õ–æ–∫–∞—Ü–∏—è', 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', '‚Ü©Ô∏è –ù–∞–∑–∞–¥'], 3)
        else:
            markdownt = buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            ActiveUser[call.from_user.id]['Finishedop'] = True
        ActiveUser[call.from_user.id]['sentmes'] = bot.send_message(
            call.from_user.id,
            functions.curtask(call.data.split()[1]),
            reply_markup=markdownt
        )
        if status[11] != 3:
            ActiveUser[call.from_user.id]['task'] = call.data.split()[1]
            bot.register_next_step_handler(call.message, Task.task1)
        else:
            ActiveUser[call.from_user.id]['Pause_main_handler'] = False
            ActiveUser[call.from_user.id]['Finishedop'] = True
    elif call.data.split()[0] == 'confirm':# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏
        processing = bot.send_sticker(call.from_user.id, "CAACAgIAAxkBAAEJL8dkedQ1ckrfN8fniwY7yUc-YNaW_AACIAAD9wLID1KiROfjtgxPLwQ", reply_markup=buttons.clearbuttons())
        if db.get_record_by_id('Tasks', call.data.split()[1])[11] == 5:
            stat = 6
        else:
            stat = 2
        if db.get_record_by_id('Tasks', call.data.split()[1])[11] > 1:
            functions.mesdel(call.from_user.id, processing.message_id)
            bot.send_message(
                call.from_user.id,
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É! –µ–µ —É–∂–µ –ø—Ä–∏–Ω—è–ª " + db.get_record_by_id('Users', db.get_record_by_id('Tasks', call.data.split()[1])[6])[2] + ' ' + db.get_record_by_id('Users', db.get_record_by_id('Tasks', call.data.split()[1])[6])[1],
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
        else:
            db.update_records(
                'Tasks',
                [
                    'confirmed',
                    'master',
                    'status'
                ], [
                    datetime.now().strftime("%d.%m.%Y %H:%M"),
                    call.from_user.id,
                    stat
                ],
                'id',
                call.data.split()[1]
            )
            functions.sendtoall(str(db.get_record_by_id('Users', call.from_user.id)[2]) + ' ' + str(db.get_record_by_id('Users', call.from_user.id)[1]) + '\n–ü—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É:\n\n' + functions.curtask(call.data.split()[1]), '', call.from_user.id)
            functions.mesdel(call.from_user.id, processing.message_id)
            bot.send_message(
                call.from_user.id,
                "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É...",
                reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
            )
            functions.deletentm(call.data.split()[1])
        ActiveUser[call.from_user.id]['Pause_main_handler'] = False
        ActiveUser[call.from_user.id]['Finishedop'] = True
    elif call.data.split()[0] == 'set':# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
        users = db.select_table('Users')
        bot.send_message(
            call.from_user.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞...',
            reply_markup=buttons.Buttons(functions.listgen(users, [0, 1, 2], 3), 1)
        )
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        ActiveUser[call.from_user.id]['task'] = call.data.split()[1]
        bot.register_next_step_handler(call.message, Task.task4)
    else:
        bot.send_message(
            call.message,
            '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            reply_markup=buttons.Buttons(['üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', 'üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 'üñ®Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', 'üìà –û—Ç—á–µ—Ç—ã', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º'],3)
        )
        ActiveUser[call.from_user.id]['Pause_main_handler'] = False

# =====================================  –¶ –ò –ö –õ –ò –ß –ï –° –ö –ò –ô   –ó –ê –ü –£ –° –ö   –ë –û –¢ –ê  =====================================

if __name__ == '__main__':
    # functions.sendtoall('‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è–°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω...‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "/start"', buttons.Buttons(['/start']), 0, 0, True)
    users = db.select_table('Users')
    for user in users:
        ActiveUser[user[0]]= {'id': user[0]}
        ActiveUser[user[0]]['block_main_menu'] = False
        ActiveUser[user[0]]['block_nt1'] = False
    thread = threading.Thread(target=asyncio.run, args=(schedule.main(),))
    thread.start()

# bot.polling()

try:
    bot.polling()
except Exception as e:
    logging.error(e)
    pass